This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
package.json
public/index.html
public/manifest.json
src/App.jsx
src/components/Auth/LoginForm.jsx
src/components/Auth/RegisterForm.jsx
src/components/Chat/ChatWindow.jsx
src/components/Forms/FormDisplay.jsx
src/components/Forms/FormItem.jsx
src/components/Forms/FormList.jsx
src/components/Forms/FormManagement.jsx
src/components/Layout/Footer.jsx
src/components/Layout/Navbar.jsx
src/components/News/ArticleItem.jsx
src/components/News/ArticleList.jsx
src/components/News/ArticlePageManagement.jsx
src/components/Pages/GeneralPageManagement.jsx
src/components/Pages/PageDisplay.jsx
src/components/Settings/SettingsForm.jsx
src/components/Tickets/TicketDetails.jsx
src/components/Tickets/TicketForm.jsx
src/components/Tickets/TicketItem.jsx
src/components/Tickets/TicketList.jsx
src/components/Tickets/TicketManagement.jsx
src/components/UI/ErrorMessage.jsx
src/components/UI/Loader.jsx
src/components/UI/Modal.jsx
src/components/UI/PrivateRoute.jsx
src/components/Users/UserDetails.jsx
src/components/Users/UserItem.jsx
src/components/Users/UserList.jsx
src/components/Users/UserManagement.jsx
src/context/AuthContext.jsx
src/firebase.js
src/index.jsx
src/pages/AccountManagement.jsx
src/pages/ArticlePageManagementPage.jsx
src/pages/FormsManagementPage.jsx
src/pages/FormsPage.jsx
src/pages/GeneralPageManagementPage.jsx
src/pages/Home.jsx
src/pages/NewsPage.jsx
src/pages/Officials.jsx
src/pages/Register.jsx
src/pages/SignIn.jsx
src/pages/SiteSettingsManagement.jsx
src/pages/SubmitTicket.jsx
src/pages/TicketManagementPage.jsx
src/pages/UserManagementPage.jsx
src/services/auth.service.js
src/services/chat.service.js
src/services/forms.service.js
src/services/messages.service.js
src/services/pages.service.js
src/services/settings.service.js
src/services/tickets.service.js
src/services/users.service.js
src/styles/global.css
src/styles/theme.js
src/utils.js

================================================================
Files
================================================================

================
File: package.json
================
{
    "name": "barangay-client",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "@emotion/react": "^11.11.1",
        "@emotion/styled": "^11.11.0",
        "@mui/icons-material": "^5.14.18",
        "@mui/material": "^5.14.18",
        "axios": "^1.6.2",
        "firebase": "^10.6.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-markdown": "^9.0.1",
        "react-router-dom": "^6.19.0",
        "react-scripts": "5.0.1",
        "react-simplemde-editor": "^5.2.0",
        "remark-gfm": "^4.0.1",
        "web-vitals": "^2.1.4"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "devDependencies": {
        "tailwindcss": "^3.3.5"
    }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Barangay Management System Client Application"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />

    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

    <title>Barangay Management System</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>

  </body>
</html>

================
File: public/manifest.json
================
{
    "short_name": "Barangay CLient",
    "name": "Barangay",
    "icons": [
      {
        "src": "favicon.ico",
        "sizes": "64x64 32x32 24x24 16x16",
        "type": "image/x-icon"
      },
      {
        "src": "logo192.png",
        "type": "image/png",
        "sizes": "192x192"
      },
      {
        "src": "logo512.png",
        "type": "image/png",
        "sizes": "512x512"
      }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
  }

================
File: src/App.jsx
================
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Officials from './pages/Officials';
import NewsPage from './pages/NewsPage';
import FormsPage from './pages/FormsPage';
import SubmitTicket from './pages/SubmitTicket';
import SignIn from './pages/SignIn';
import Register from './pages/Register';
import AccountManagement from './pages/AccountManagement';
import TicketManagementPage from './pages/TicketManagementPage';
import UserManagementPage from './pages/UserManagementPage';
import ArticlePageManagementPage from './pages/ArticlePageManagementPage';
import GeneralPageManagementPage from './pages/GeneralPageManagementPage';
import FormsManagementPage from './pages/FormsManagementPage';
import SiteSettingsManagement from './pages/SiteSettingsManagement';
import Navbar from './components/Layout/Navbar';
import Footer from './components/Layout/Footer';
import ChatWindow from './components/Chat/ChatWindow';
import PrivateRoute from './components/UI/PrivateRoute';
import TicketDetails from './components/Tickets/TicketDetails';
import UserDetails from './components/Users/UserDetails'; // Import UserDetails

function App() {
  return (
    <>
      <Navbar /><ChatWindow />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/officials" element={<Officials />} />
        <Route path="/news/*" element={<NewsPage />} />
        <Route path="/forms" element={<FormsPage />} />
        <Route path="/submit-ticket" element={<PrivateRoute roles={['RESIDENT', 'EMPLOYEE', 'ADMIN']} redirectTo="/sign-in"><SubmitTicket /></PrivateRoute>} />
        <Route path="/sign-in" element={<SignIn />} />
        <Route path="/register" element={<Register />} />
        <Route path="/account-management" element={<PrivateRoute roles={['RESIDENT', 'EMPLOYEE', 'ADMIN']}><AccountManagement /></PrivateRoute>} />
        <Route path="/ticket-management/*" element={<PrivateRoute roles={['RESIDENT']}><TicketManagementPage /></PrivateRoute>}> <Route path=":id" element={<TicketDetails />} /></Route>
        <Route path="/employee/account-management" element={<PrivateRoute roles={['EMPLOYEE', 'ADMIN']}><AccountManagement /></PrivateRoute>} />
        <Route path="/employee/ticket-management/*" element={<PrivateRoute roles={['EMPLOYEE']}><TicketManagementPage /></PrivateRoute>}> <Route path=":id" element={<TicketDetails />} /></Route>
        <Route path="/employee/user-management" element={<PrivateRoute roles={['EMPLOYEE']}><UserManagementPage /></PrivateRoute>} />
        <Route path="/employee/news-management" element={<PrivateRoute roles={['EMPLOYEE']}><ArticlePageManagementPage /></PrivateRoute>} />
        <Route path="/employee/forms-management" element={<PrivateRoute roles={['EMPLOYEE']}><FormsManagementPage /></PrivateRoute>} />
        <Route path="/admin/account-management" element={<PrivateRoute roles={['ADMIN']}><AccountManagement /></PrivateRoute>} />
        <Route path="/admin/ticket-management/*" element={<PrivateRoute roles={['ADMIN']}><TicketManagementPage /></PrivateRoute>}> <Route path=":id" element={<TicketDetails />} /></Route>
        <Route path="/admin/user-management/*" element={<PrivateRoute roles={['ADMIN']}><UserManagementPage /></PrivateRoute>}> <Route path=":id" element={<UserDetails />} /></Route>
        <Route path="/admin/news-management" element={<PrivateRoute roles={['ADMIN']}><ArticlePageManagementPage /></PrivateRoute>} />
        <Route path="/admin/forms-management" element={<PrivateRoute roles={['ADMIN']}><FormsManagementPage /></PrivateRoute>} />
        <Route path="/admin/site-settings-management" element={<PrivateRoute roles={['ADMIN']}><SiteSettingsManagement /></PrivateRoute>} />
        <Route path="/admin/page-management" element={<PrivateRoute roles={['ADMIN', 'EMPLOYEE']}><GeneralPageManagementPage /></PrivateRoute>} />
      </Routes>
      <Footer />
    </>
  );
}

export default App;

================
File: src/components/Auth/LoginForm.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { signIn } from '../../services/auth.service';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Alert from '@mui/material/Alert';


function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { currentUser } = useAuth();

    // Redirect if already logged in
    React.useEffect(() => {
      if (currentUser) {
          navigate('/');
      }
    }, [currentUser, navigate]);



  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    setLoading(true);

    try {
      await signIn(email, password);
      navigate('/'); // Redirect to home page after successful login
    } catch (err) {
      setError(err.message || 'Failed to sign in. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container component="main" maxWidth="xs">
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        <Typography component="h1" variant="h5">
          Sign In
        </Typography>
        {error && <Alert severity="error">{error}</Alert>}
        <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label="Email Address"
            name="email"
            autoComplete="email"
            autoFocus
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
            disabled={loading}
          >
            {loading ? 'Signing In...' : 'Sign In'}
          </Button>
        </Box>
      </Box>
    </Container>
  );
}

export default LoginForm;

================
File: src/components/Auth/RegisterForm.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { signUp } from '../../services/auth.service';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Alert from '@mui/material/Alert';

function RegisterForm() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [phone, setPhone] = useState('');
    const [address, setAddress] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();

    const handleSubmit = async (event) => {
        event.preventDefault();
        setError('');
        setLoading(true); 

        try { 
            await signUp(email, password, firstName, lastName, phone, address);
            navigate('/sign-in'); // Redirect *only* on full success
        } catch (err) {
            setError(err.message || 'Failed to register. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    return (
          <Container component="main" maxWidth="xs">
        <Box
          sx={{
            marginTop: 8,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }}
        >
          <Typography component="h1" variant="h5">
            Register
          </Typography>
          {error && <Alert severity="error">{error}</Alert>} {/* Display the error */}
          <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
            <TextField
              margin="normal"
              required
              fullWidth
              id="firstName"
              label="First Name"
              name="firstName"
              autoFocus
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
            />
            <TextField
              margin="normal"
              required
              fullWidth
              id="lastName"
              label="Last Name"
              name="lastName"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
            />
            <TextField
              margin="normal"
              required
              fullWidth
              id="email"
              label="Email Address"
              name="email"
              autoComplete="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="Password"
              type="password"
              id="password"
              autoComplete="new-password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <TextField
              margin="normal"
              fullWidth
              id="phone"
              label="Phone Number"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
            <TextField
              margin="normal"
              fullWidth
              id="address"
              label="Address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
            />

            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
              disabled={loading}
            >
              {loading ? 'Registering...' : 'Register'}
            </Button>
          </Box>
        </Box>
      </Container>
    );
}

export default RegisterForm;

================
File: src/components/Chat/ChatWindow.jsx
================
import React, { useState } from 'react';
import { sendMessageToChatbot } from '../../services/chat.service';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Paper from '@mui/material/Paper'; // For a nice chat bubble effect
import Avatar from '@mui/material/Avatar';
import SendIcon from '@mui/icons-material/Send';
import { useAuth } from '../../context/AuthContext';

function ChatWindow() {
    const [message, setMessage] = useState('');
    const [chatHistory, setChatHistory] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const {currentUser} = useAuth();


    const handleSendMessage = async () => {
      if (!message.trim()) return;

      setError('');
      setLoading(true);
      const userMessage = { text: message, sender: 'user' };
      setChatHistory(prevHistory => [...prevHistory, userMessage]);
      setMessage(''); // Clear input after sending

      try {
          const botResponseText = await sendMessageToChatbot(message);
          const botMessage = { text: botResponseText, sender: 'bot' };
          setChatHistory(prevHistory => [...prevHistory, botMessage]);
      } catch (err) {
          setError(err.message || 'Failed to get response from chatbot.');
          const botMessage = { text: 'Error, no response.', sender: 'bot' };
          setChatHistory(prevHistory => [...prevHistory, botMessage]);

      } finally {
          setLoading(false);
      }
  };


    return (
      <Box
        sx={{
          position: 'fixed',
          bottom: '20px', 
          right: '20px', 
          width: '300px', 
          maxHeight: '400px', 
          display: 'flex',
          flexDirection: 'column',
          border: '1px solid #ccc',
          borderRadius: '8px',
          backgroundColor: 'white',
          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',
          zIndex: 1000,
        }}
      >
        <Typography variant="h6" sx={{ p: 2, backgroundColor: '#f0f0f0', borderBottom: '1px solid #ccc' }}>
            Chat with Barangay AI
        </Typography>
        {currentUser ? (<Box sx={{ overflowY: 'auto', flexGrow: 1, p: 2 }}>
          {chatHistory.map((msg, index) => (
            <Box
              key={index}
              sx={{
                display: 'flex',
                flexDirection: msg.sender === 'user' ? 'row-reverse' : 'row',
                alignItems: 'flex-start',
                mb: 1,
              }}
            >
              <Avatar sx={{ bgcolor: msg.sender === 'user' ? 'primary.main' : 'grey.500', width: 24, height: 24, ml: msg.sender === 'user'? 1:0, mr: msg.sender==='bot'? 1:0 }}>
                {msg.sender === 'user' ? 'U' : 'B'}
              </Avatar>
              <Paper
                elevation={1}
                sx={{
                  p: 1,
                  borderRadius: '8px',
                  maxWidth: '70%',
                  backgroundColor: msg.sender === 'user' ? '#e0f7fa' : '#f5f5f5',
                }}
              >
                <Typography variant="body2">{msg.text}</Typography>
              </Paper>
            </Box>
          ))}
           {error && <Typography color="error">{error}</Typography>}
        </Box>) : ( <Box sx={{ flexGrow: 1, p: 2, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
            <Typography variant="body2" color="textSecondary">
                Please sign in to chat.
            </Typography>
            </Box>
        )}
        <Box sx={{ p: 1, borderTop: '1px solid #ccc' }}>
          <TextField
            fullWidth
            variant="outlined"
            size="small"
            placeholder="Type your message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault(); // Prevent newline on Enter
                handleSendMessage();
              }
            }}
            disabled={!currentUser}
            InputProps={{
              endAdornment: (
                <Button
                  size="small"
                  color="primary"
                  onClick={handleSendMessage}
                  disabled={loading || !currentUser}
                  endIcon={<SendIcon />}
                >
                  Send
                </Button>
              ),
            }}
          />
        </Box>
      </Box>
    );
}

export default ChatWindow;

================
File: src/components/Forms/FormDisplay.jsx
================
import React from 'react';
import { Container, Typography, Paper } from '@mui/material';

function FormDisplay({ form }) {
    if (!form) {
        return (
            <Container>
            <Typography variant="h4">Form Not Found</Typography>
            </Container>
        )
    }
    return (
        <Container>
            <Paper elevation={3} sx={{ padding: 3, marginTop: 2 }}>
                <Typography variant="h4">{form.title}</Typography>
                <Typography variant="subtitle1">{form.description}</Typography>
                <a href={form.link} target="_blank" rel="noopener noreferrer" style={{textDecoration: 'none', color: 'inherit'}}>
                Open Form
                </a>
            </Paper>
        </Container>
  );
}

export default FormDisplay;

================
File: src/components/Forms/FormItem.jsx
================
import React from 'react';
import { ListItem, ListItemAvatar, Avatar, ListItemText, Typography } from '@mui/material'; // Removed Link
import DescriptionIcon from '@mui/icons-material/Description';

function FormItem({ form }) {
  return (
    <ListItem>
      <ListItemAvatar>
        <Avatar>
          {form.logoURL ? <img src={form.logoURL} alt={form.title} style={{ width: '100%', height: '100%' }} /> : <DescriptionIcon />}
        </Avatar>
      </ListItemAvatar>
      <ListItemText
        primary={<a href={form.link} target="_blank" rel="noopener noreferrer" style={{textDecoration: 'none', color: 'inherit'}}>{form.title}</a>}
        secondary={
          <Typography
            component="span"
            variant="body2"
            color="text.secondary"
          >
            {form.description}
          </Typography>
        }
      />
    </ListItem>
  );
}

export default FormItem;

================
File: src/components/Forms/FormList.jsx
================
import React from 'react';
import { List } from '@mui/material';
import FormItem from './FormItem';

function FormList({ forms }) {
  return (
    <List>
      {forms.map((form) => (
        <FormItem key={form.id} form={form} />
      ))}
    </List>
  );
}

export default FormList;

================
File: src/components/Forms/FormManagement.jsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  List,
  ListItem,
  ListItemText,
  TextField,
  Typography,
} from '@mui/material';
import { getAllForms, createForm, updateForm, deleteForm } from '../../services/forms.service';
import { useAuth } from '../../context/AuthContext';
import ErrorMessage from '../UI/ErrorMessage';

function FormManagement() {
  const [forms, setForms] = useState([]);
  const [openCreateDialog, setOpenCreateDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [currentForm, setCurrentForm] = useState({ title: '', description: '', link: '', logoURL: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchForms = async () => {
      setLoading(true);
      try {
        const fetchedForms = await getAllForms();
        setForms(fetchedForms);
      } catch (error) {
        console.error("Failed to fetch forms:", error);
        setError("Failed to load forms.");
      } finally {
        setLoading(false);
      }
    };

    fetchForms();
  }, []);

  const handleCreateOpen = () => {
    setCurrentForm({ title: '', description: '', link: '', logoURL: '' });
    setOpenCreateDialog(true);
  };
  const handleCreateClose = () => {
    setOpenCreateDialog(false);
  };

  const handleEditOpen = (form) => {
    setCurrentForm(form);
    setOpenEditDialog(true);
  };

  const handleEditClose = () => {
    setOpenEditDialog(false);
  };

    const handleCreate = async () => {
        setLoading(true);
        try {
            const newId = await createForm(currentForm);
            setForms(prevForms => [...prevForms, { ...currentForm, id: newId }]); //optimistic update
            handleCreateClose(); // Close the dialog
            setError('');
        } catch (error) {
            console.error("Failed to create form:", error);
            setError('Failed to create form. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    const handleUpdate = async () => {
        setLoading(true);
    try {
      await updateForm(currentForm.id, currentForm);
      setForms(prevForms =>
        prevForms.map(f => (f.id === currentForm.id ? currentForm : f))
      );
      handleEditClose();
        setError('');
    } catch (err) {
      console.error('Error updating form', err);
      setError("Failed to update form");

    } finally {
        setLoading(false);
    }
  };

    const handleDelete = async (formId) => {
        setLoading(true);
        try {
            await deleteForm(formId);
            setForms(prevForms => prevForms.filter(form => form.id !== formId));
            setError('');
        } catch(error) {
            console.error("Error deleting Form: ", error);
            setError("Failed to delete form");
        } finally {
            setLoading(false);
        }

    }

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Form Management
      </Typography>
      <Button variant="contained" color="primary" onClick={handleCreateOpen} sx={{ mb: 2 }}>
        Create New Form
      </Button>
        {error && <ErrorMessage message={error}/>}
        {loading && <Typography>Loading...</Typography>}
      <List>
        {forms.map((form) => (
          <ListItem key={form.id} divider>
            <ListItemText primary={form.title} secondary={form.description} />
            <Button onClick={() => handleEditOpen(form)} disabled={loading}>Edit</Button>
            <Button onClick={() => handleDelete(form.id)} color="error" disabled={loading}>Delete</Button>
          </ListItem>
        ))}
      </List>

      {/* Create Form Dialog */}
      <Dialog open={openCreateDialog} onClose={handleCreateClose}>
        <DialogTitle>Create New Form</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Title"
            fullWidth
            variant="standard"
            value={currentForm.title}
            onChange={(e) => setCurrentForm({ ...currentForm, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Description"
            fullWidth
            variant="standard"
            value={currentForm.description}
            onChange={(e) => setCurrentForm({ ...currentForm, description: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Link"
            fullWidth
            variant="standard"
            value={currentForm.link}
            onChange={(e) => setCurrentForm({ ...currentForm, link: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Logo URL (Optional)"
            fullWidth
            variant="standard"
            value={currentForm.logoURL}
            onChange={(e) => setCurrentForm({ ...currentForm, logoURL: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCreateClose}>Cancel</Button>
          <Button onClick={handleCreate} disabled={loading}>Create</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Form Dialog */}
      <Dialog open={openEditDialog} onClose={handleEditClose}>
        <DialogTitle>Edit Form</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Title"
            fullWidth
            variant="standard"
            value={currentForm.title}
            onChange={(e) => setCurrentForm({ ...currentForm, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Description"
            fullWidth
            variant="standard"
            value={currentForm.description}
            onChange={(e) => setCurrentForm({ ...currentForm, description: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Link"
            fullWidth
            variant="standard"
            value={currentForm.link}
            onChange={(e) => setCurrentForm({ ...currentForm, link: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Logo URL (Optional)"
            fullWidth
            variant="standard"
            value={currentForm.logoURL}
            onChange={(e) => setCurrentForm({ ...currentForm, logoURL: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleEditClose}>Cancel</Button>
          <Button onClick={handleUpdate} disabled={loading}>Update</Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}

export default FormManagement;

================
File: src/components/Layout/Footer.jsx
================
import React from 'react';
import { Box, Typography } from '@mui/material';

function Footer() {
  return (
    <Box
      sx={{
        backgroundColor: 'primary.main',
        color: 'primary.contrastText',
        p: 2,
        textAlign: 'center',
        position: 'relative',
        bottom: 0,
        width: '100%',
      }}
    >
      <Typography variant="body2">
        © {new Date().getFullYear()} Barangay Management System. All rights reserved.
      </Typography>
    </Box>
  );
}

export default Footer;

================
File: src/components/Layout/Navbar.jsx
================
import React from 'react';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { signOutUser } from '../../services/auth.service';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import MenuIcon from '@mui/icons-material/Menu';


function Navbar() {
  const { currentUser, loading } = useAuth();
  const navigate = useNavigate();


    const handleSignOut = async () => {
        try {
            await signOutUser();
            navigate('/sign-in'); // Redirect to sign-in page
        } catch (error) {
            console.error("Failed to sign out:", error);
        }
    };


  // If the authentication state is still loading dont render the navbar yet
  if (loading) {
    return null; 
  }

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <IconButton
            size="large"
            edge="start"
            color="inherit"
            aria-label="menu"
            sx={{ mr: 2 }}
          >
            <MenuIcon /> {/* todo */}
          </IconButton>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            <RouterLink to="/" style={{ textDecoration: 'none', color: 'inherit' }}>
                Barangay System
            </RouterLink>
          </Typography>

          {/* Guest User Links */}
          {!currentUser && (
            <>
              <Button color="inherit" component={RouterLink} to="/news">News</Button>
              <Button color="inherit" component={RouterLink} to="/officials">Officials</Button>
              <Button color="inherit" component={RouterLink} to="/forms">Forms</Button>
              <Button color="inherit" component={RouterLink} to="/sign-in">Sign In</Button>
              <Button color="inherit" component={RouterLink} to="/register">Register</Button>
             </>
          )}


           {/* Resident User Links */}
           {currentUser && currentUser.type === 'RESIDENT' && (
            <>
              <Button color="inherit" component={RouterLink} to="/news">News</Button>
              <Button color="inherit" component={RouterLink} to="/officials">Officials</Button>
              <Button color="inherit" component={RouterLink} to="/forms">Forms</Button>
              <Button color="inherit" component={RouterLink} to="/submit-ticket">Submit Ticket</Button>
              <Button color="inherit" component={RouterLink} to="/account-management">Account</Button>
              <Button color="inherit" component={RouterLink} to="/ticket-management">My Tickets</Button>
              <Button color="inherit" onClick={handleSignOut}>Sign Out</Button>
            </>
          )}

          {/* Common Links for Employee/Admin  */}
          {(currentUser && (currentUser.type === 'EMPLOYEE' || currentUser.type === 'ADMIN')) && (
            <>
                <Button color="inherit" component={RouterLink} to="/news">News</Button>
              <Button color="inherit" component={RouterLink} to="/officials">Officials</Button>
              <Button color="inherit" component={RouterLink} to="/forms">Forms</Button>

                <Button color="inherit" component={RouterLink} to="/employee/account-management">Account</Button>
                <Button color="inherit" component={RouterLink} to="/employee/ticket-management">Tickets</Button>
                <Button color="inherit" component={RouterLink} to="/employee/news-management">News Management</Button>
                <Button color="inherit" component={RouterLink} to="/employee/forms-management">Forms Management</Button>
                {currentUser.type === 'ADMIN' && (
                  <>
                    <Button color="inherit" component={RouterLink} to="/admin/user-management">User Management</Button>
                    <Button color="inherit" component={RouterLink} to="/admin/page-management">Page Management</Button>
                    <Button color="inherit" component={RouterLink} to="/admin/site-settings-management">Site Settings</Button>
                    </>
                )}
                 <Button color="inherit" onClick={handleSignOut}>Sign Out</Button>
            </>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
}

export default Navbar;

================
File: src/components/News/ArticleItem.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getPageBySlug } from '../../services/pages.service';
import { Container, Typography, Paper } from '@mui/material';
import ReactMarkdown from 'react-markdown';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';
import gfm from 'remark-gfm';


function ArticleItem() {
  const { slug } = useParams();
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchArticle = async () => {
      try {
        const fetchedArticle = await getPageBySlug(slug);
        if (fetchedArticle) {
          setArticle(fetchedArticle);
        } else {
          setError('Article not found.');
        }
      } catch (err) {
        setError('Failed to load article.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchArticle();
  }, [slug]);

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  if (!article) {
    return <Typography>Article not found.</Typography>;
  }

  return (
    <Container component="main" maxWidth="md">
      <Paper elevation={3} sx={{ padding: 3, marginTop: 2 }}>
        <Typography variant="h3" gutterBottom>
          {article.title}
        </Typography>
        {article.createdAt && (<Typography variant="subtitle2" color="textSecondary" gutterBottom>
            Published on: {new Date(article.createdAt).toLocaleDateString()}
        </Typography>)}
        <ReactMarkdown remarkPlugins={[gfm]}>{article.content}</ReactMarkdown>
      </Paper>
    </Container>
  );
}

export default ArticleItem;

================
File: src/components/News/ArticleList.jsx
================
import React from 'react';
import { List, ListItem, ListItemText, Typography, Divider } from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

function ArticleList({ articles }) {
  return (
    <List>
      {articles.map((article) => (
        <React.Fragment key={article.id}>
          <ListItem alignItems="flex-start" component={RouterLink} to={`/news/${article.slug}`} sx={{ textDecoration: 'none' }}>
            <ListItemText
              primary={article.title}
              secondary={
                <>
                  <Typography
                    sx={{ display: 'inline' }}
                    component="span"
                    variant="body2"
                    color="text.primary"
                  >
                  </Typography>
                  {/* Display createdAt */}
                  {article.createdAt && (
                    <Typography variant="caption" color="text.secondary">
                        {/* formatDate from utils.js */}
                      {new Date(article.createdAt).toLocaleDateString()}
                    </Typography>
                  )}
                </>
              }
            />
          </ListItem>
          <Divider variant="inset" component="li" />
        </React.Fragment>
      ))}
    </List>
  );
}

export default ArticleList;

================
File: src/components/News/ArticlePageManagement.jsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  List,
  ListItem,
  ListItemText,
  TextField,
  Typography,
} from '@mui/material';
import { getAllPages, createPage, updatePage, deletePage } from '../../services/pages.service';
import MarkdownEditor from '../Pages/MarkdownEditor';
import { useAuth } from '../../context/AuthContext'; 
import { useNavigate } from 'react-router-dom';
import ErrorMessage from '../UI/ErrorMessage';

function ArticlePageManagement() {
  const [articles, setArticles] = useState([]);
  const [openCreateDialog, setOpenCreateDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [currentArticle, setCurrentArticle] = useState({ title: '', slug: '', content: '', type: 'ARTICLE' }); //Default type.
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const navigate = useNavigate();
  const { currentUser } = useAuth(); // 

  // Fetch articles on component mount
  useEffect(() => {
        const fetchArticles = async () => {
        setLoading(true);
        try {
            const allPages = await getAllPages();
            const filteredArticles = allPages.filter(page => page.type === 'ARTICLE');
            setArticles(filteredArticles);
        } catch (error) {
            console.error("Failed to fetch articles:", error);
            setError('Failed to load articles.');
        } finally {
            setLoading(false);
        }
    };

    fetchArticles();

  }, []);


  const handleCreateOpen = () => {
    setCurrentArticle({ title: '', slug: '', content: '', type: 'ARTICLE'  });
    setOpenCreateDialog(true);
  };
  const handleCreateClose = () => {
    setOpenCreateDialog(false);
  };

  const handleEditOpen = (article) => {
    setCurrentArticle(article);
    setOpenEditDialog(true);
  };

  const handleEditClose = () => {
    setOpenEditDialog(false);
  };



  const handleCreate = async () => {
        setLoading(true);
        try {
            const newId = await createPage(currentArticle);
            setArticles(prevArticles => [...prevArticles, { ...currentArticle, id: newId }]);
            handleCreateClose();
            setError('');
        } catch (error) {
            console.error("Error creating article:", error);
            setError("Failed to create article");
        } finally {
            setLoading(false);
        }
    };

  const handleUpdate = async () => {
    setLoading(true);
    try {
      await updatePage(currentArticle.slug, currentArticle);
      setArticles(prevArticles =>
        prevArticles.map(a => (a.id === currentArticle.id ? currentArticle : a))
      );
      handleEditClose();
    } catch (err) {
      console.error('Error updating article', err);
      setError("Failed to update article");

    } finally {
        setLoading(false);
    }
  };

  const handleDelete = async (articleId, articleSlug) => {
    setLoading(true)
    try{
        await deletePage(articleSlug);
        setArticles(prevArticles => prevArticles.filter(article => article.id !== articleId));
        setError('');
    } catch (error){
        console.error("Error deleting article:", error);
        setError("Failed to delete article");
    } finally {
        setLoading(false);
    }
  };



 return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Article Management
      </Typography>
      <Button variant="contained" color="primary" onClick={handleCreateOpen} sx={{ mb: 2 }}>
        Create New Article
      </Button>
      {error && <ErrorMessage message={error}/>}
      {loading && <Typography>Loading...</Typography>}
      <List>
        {articles.map((article) => (
          <ListItem key={article.id} divider>
            <ListItemText primary={article.title} secondary={`Slug: ${article.slug}`} />
            <Button onClick={() => handleEditOpen(article)} disabled={loading}>Edit</Button>
            <Button onClick={() => handleDelete(article.id, article.slug)} color="error" disabled={loading}>Delete</Button>
          </ListItem>
        ))}
      </List>

      {/* Create Article Dialog */}
      <Dialog open={openCreateDialog} onClose={handleCreateClose}>
        <DialogTitle>Create New Article</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Title"
            fullWidth
            variant="standard"
            value={currentArticle.title}
            onChange={(e) => setCurrentArticle({ ...currentArticle, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Slug"
            fullWidth
            variant="standard"
            value={currentArticle.slug}
            onChange={(e) => setCurrentArticle({ ...currentArticle, slug: e.target.value })}
          />
          <MarkdownEditor
            value={currentArticle.content}
            onChange={(value) => setCurrentArticle({ ...currentArticle, content: value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCreateClose}>Cancel</Button>
          <Button onClick={handleCreate} disabled={loading}>Create</Button>
        </DialogActions>
      </Dialog>

    {/* Edit Article Dialog */}
    <Dialog open={openEditDialog} onClose={handleEditClose}>
        <DialogTitle>Edit Article</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Title"
            fullWidth
            variant="standard"
            value={currentArticle.title}
            onChange={(e) => setCurrentArticle({ ...currentArticle, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Slug"
            fullWidth
            variant="standard"
            value={currentArticle.slug}
            onChange={(e) => setCurrentArticle({ ...currentArticle, slug: e.target.value })}
          />
          <MarkdownEditor
            value={currentArticle.content}
            onChange={(value) => setCurrentArticle({ ...currentArticle, content: value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleEditClose}>Cancel</Button>
          <Button onClick={handleUpdate} disabled={loading}>Update</Button>
        </DialogActions>
    </Dialog>
    </Container>
  );
}

export default ArticlePageManagement;

================
File: src/components/Pages/GeneralPageManagement.jsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  List,
  ListItem,
  ListItemText,
  TextField,
  Typography,
} from '@mui/material';
import { getAllPages, createPage, updatePage, deletePage } from '../../services/pages.service';
import MarkdownEditor from './MarkdownEditor'; // Reuse the MarkdownEditor
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import ErrorMessage from '../UI/ErrorMessage';

function GeneralPageManagement() {
  const [pages, setPages] = useState([]);
  const [openCreateDialog, setOpenCreateDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [currentPage, setCurrentPage] = useState({ title: '', slug: '', content: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

    const navigate = useNavigate();
    const { currentUser } = useAuth(); // Get the currentUser

  // filtering for NON-article pages
  useEffect(() => {
        const fetchPages = async () => {
            setLoading(true);
            try {
                const allPages = await getAllPages();
                const generalPages = allPages.filter(page => page.type !== 'ARTICLE'); // Filter out articles
                setPages(generalPages);
            } catch (error) {
                console.error("Failed to fetch general pages:", error);
                setError("Failed to load general pages.");
            } finally {
                setLoading(false);
            }
        };

        fetchPages();
  }, []);

  const handleCreateOpen = () => {
    setCurrentPage({ title: '', slug: '', content: '' }); 
    setOpenCreateDialog(true);
  };
  const handleCreateClose = () => {
    setOpenCreateDialog(false);
  };

    const handleEditOpen = (page) => {
        setCurrentPage(page);
        setOpenEditDialog(true);
    };

  const handleEditClose = () => {
    setOpenEditDialog(false);
  };

  const handleCreate = async () => {
    setLoading(true);
    try {
      const newId = await createPage(currentPage);
      setPages(prevPages => [...prevPages, { ...currentPage, id: newId }]);
      handleCreateClose();
    } catch (error) {
        console.error("Failed to create page: ", error);
        setError("Failed to create page")
    } finally {
      setLoading(false);
    }
  };

  const handleUpdate = async () => {
    setLoading(true);
    try{
        await updatePage(currentPage.slug, currentPage);
        setPages(prevPages =>
            prevPages.map(p => (p.id === currentPage.id ? currentPage : p))
        );
        handleEditClose();
    }catch (error){
        console.error("Failed to update page: ", error);
        setError("Failed to update page")
    } finally {
        setLoading(false)
    }

  };

  const handleDelete = async (pageId, pageSlug) => {
        setLoading(true);
        try{
            await deletePage(pageSlug);
            setPages(prevPages => prevPages.filter(page => page.id !== pageId));
            setError('');
        } catch (error){
            console.error("Error deleting page:", error);
            setError("Failed to delete page");
        } finally {
            setLoading(false);
        }
  };

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        General Page Management
      </Typography>
      <Button variant="contained" color="primary" onClick={handleCreateOpen} sx={{ mb: 2 }}>
        Create New Page
      </Button>
        {error && <ErrorMessage message={error}/>}
        {loading && <Typography>Loading...</Typography>}
      <List>
        {pages.map((page) => (
          <ListItem key={page.id} divider>
            <ListItemText primary={page.title} secondary={`Slug: ${page.slug}`} />
            <Button onClick={() => handleEditOpen(page)} disabled={loading}>Edit</Button>
            <Button onClick={() => handleDelete(page.id, page.slug)} color="error" disabled={loading}>Delete</Button>
          </ListItem>
        ))}
      </List>

      {/* Create Page Dialog */}
      <Dialog open={openCreateDialog} onClose={handleCreateClose}>
        <DialogTitle>Create New Page</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Title"
            fullWidth
            variant="standard"
            value={currentPage.title}
            onChange={(e) => setCurrentPage({ ...currentPage, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Slug"
            fullWidth
            variant="standard"
            value={currentPage.slug}
            onChange={(e) => setCurrentPage({ ...currentPage, slug: e.target.value })}
          />
          <MarkdownEditor
            value={currentPage.content}
            onChange={(value) => setCurrentPage({ ...currentPage, content: value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCreateClose}>Cancel</Button>
          <Button onClick={handleCreate} disabled={loading}>Create</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Page Dialog */}
        <Dialog open={openEditDialog} onClose={handleEditClose}>
            <DialogTitle>Edit Page</DialogTitle>
            <DialogContent>
            <TextField
                autoFocus
                margin="dense"
                label="Title"
                fullWidth
                variant="standard"
                value={currentPage.title}
                onChange={(e) => setCurrentPage({ ...currentPage, title: e.target.value })}
            />
            <TextField
                margin="dense"
                label="Slug"
                fullWidth
                variant="standard"
                value={currentPage.slug}
                onChange={(e) => setCurrentPage({ ...currentPage, slug: e.target.value })}
            />
            <MarkdownEditor
                value={currentPage.content}
                onChange={(value) => setCurrentPage({ ...currentPage, content: value })}
            />
            </DialogContent>
            <DialogActions>
            <Button onClick={handleEditClose}>Cancel</Button>
            <Button onClick={handleUpdate} disabled={loading}>Update</Button>
            </DialogActions>
        </Dialog>
    </Container>
  );
}

export default GeneralPageManagement;

================
File: src/components/Pages/PageDisplay.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getPageBySlug } from '../../services/pages.service';
import { Container, Typography, Paper } from '@mui/material';
import ReactMarkdown from 'react-markdown';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';
import gfm from 'remark-gfm';

function PageDisplay() {
  const { slug } = useParams();
  const [page, setPage] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchPage = async () => {
      try {
        const fetchedPage = await getPageBySlug(slug);
        if (fetchedPage) {
          setPage(fetchedPage);
        } else {
          setError('Page not found.');
        }
      } catch (err) {
        setError('Failed to load page.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchPage();
  }, [slug]);

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  if (!page) {
    return <Typography>Page not found.</Typography>;
  }

  return (
    <Container component="main" maxWidth="md">
      <Paper elevation={3} sx={{ padding: 3, marginTop: 2 }}>
        <Typography variant="h3" gutterBottom>
          {page.title}
        </Typography>
        <ReactMarkdown remarkPlugins={[gfm]}>{page.content}</ReactMarkdown>
      </Paper>
    </Container>
  );
}

export default PageDisplay;

================
File: src/components/Settings/SettingsForm.jsx
================
import React, { useState, useEffect } from 'react';
import { getSettings, updateSettings } from '../../services/settings.service';
import { Container, Typography, TextField, Button, Box } from '@mui/material';
import Loader from '../UI/Loader'; 
import ErrorMessage from '../UI/ErrorMessage';

function SettingsForm() {
  const [settings, setSettings] = useState({
    googleGeminiKey: '',
    facebookPageId: '',
    facebookAccessToken: '',
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const fetchedSettings = await getSettings();
        setSettings(fetchedSettings);
      } catch (err) {
        setError('Failed to load settings.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchSettings();
  }, []);

  const handleChange = (e) => {
    setSettings({ ...settings, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true)
    setError('');
    setSuccess('');
    try {
      await updateSettings(settings);
      setSuccess('Settings updated successfully!');
    } catch (err) {
      setError(err.message ||'Failed to update settings.');
    }finally{
        setLoading(false);
    }
  };

  if (loading) {
    return <Loader />; // Show a loading indicator
  }


  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom>
        Site Settings
      </Typography>
        {error && <ErrorMessage message={error}/>}
        {success && <Typography color='green'>{success}</Typography>}
      <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
        <TextField
          fullWidth
          label="Google Gemini Key"
          name="googleGeminiKey"
          value={settings.googleGeminiKey || ''}
          onChange={handleChange}
          margin="normal"
          variant="outlined"
        />
        <TextField
          fullWidth
          label="Facebook Page ID"
          name="facebookPageId"
          value={settings.facebookPageId || ''}
          onChange={handleChange}
          margin="normal"
          variant="outlined"
        />
        <TextField
          fullWidth
          label="Facebook Access Token"
          name="facebookAccessToken"
          value={settings.facebookAccessToken || ''}
          onChange={handleChange}
          margin="normal"
          variant="outlined"
        />
        <Button type="submit" variant="contained" color="primary" sx={{ mt: 2 }} disabled={loading}>
          Save Settings
        </Button>
      </Box>
    </Container>
  );
}

export default SettingsForm;

================
File: src/components/Tickets/TicketDetails.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getTicketById } from '../../services/tickets.service';
import { getMessagesByTicketId, createMessage } from '../../services/messages.service';
import { Container, Typography, Paper, TextField, Button, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar} from '@mui/material';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';

function TicketDetails() {
  const { id } = useParams();
  const [ticket, setTicket] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
    const [loadingMessages, setLoadingMessages] = useState(false);
  const [error, setError] = useState('');
    const [messageError, setMessageError] = useState('');

  useEffect(() => {
    const fetchTicketAndMessages = async () => {
      try {
        const fetchedTicket = await getTicketById(id);
        if (fetchedTicket) {
          setTicket(fetchedTicket);
          const fetchedMessages = await getMessagesByTicketId(id); // Fetch related messages
          setMessages(fetchedMessages);

        } else {
          setError('Ticket not found.');
        }
      } catch (err) {
        setError('Failed to load ticket details.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchTicketAndMessages();
  }, [id]);

    const handleSendMessage = async () => {
        if (!newMessage.trim()) return;

        setMessageError('');
        setLoadingMessages(true);
        try {
            const newMessageId = await createMessage(id, newMessage);
            setMessages(prevMessages => [...prevMessages, {
                id: newMessageId,
                ticket: id,
                content: newMessage,
                createdBy: "CURRENT_USER_ID",
                createdAt: new Date().toISOString()
            }]);
            setNewMessage(''); // Clear input
        } catch (error) {
            setMessageError(error.message || "Failed to send message.")
        } finally {
            setLoadingMessages(false)
        }
    }

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  if (!ticket) {
    return <Typography>Ticket not found.</Typography>;
  }

  return (
    <Container>
      <Paper elevation={3} sx={{ padding: 3, marginTop: 2 }}>
        <Typography variant="h4">{ticket.title}</Typography>
        <Typography variant="subtitle1">Type: {ticket.type}</Typography>
        <Typography variant="subtitle1">Status: {ticket.status}</Typography>
        {ticket.assignedTo && (
            <Typography variant="subtitle1">Assigned To: {ticket.assignedTo}</Typography>
        )}
        <Typography variant="body1">
            Created by: {ticket.createdBy} on {new Date(ticket.createdAt).toLocaleString()}
        </Typography>

        <Box sx={{ mt: 3 }}>
            <Typography variant="h6">Messages</Typography>
                <List>
                {messages.map((message) => (
                <ListItem key={message.id}>
                <ListItemAvatar>
                    <Avatar>
                    {/* todo */}
                    </Avatar>
                </ListItemAvatar>
                <ListItemText
                primary={message.content}
                secondary={`Sent by ${message.createdBy} on ${new Date(message.createdAt).toLocaleString()}`}
                />
            </ListItem>
            ))}
            </List>

            {/* Message Input */}
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>
            <TextField
                fullWidth
                variant="outlined"
                placeholder="Type your message..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                disabled={loadingMessages}
                sx = {{mr: 1}}
                onKeyPress={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage();
                    }
                }}
            />
            <Button variant="contained" color="primary" onClick={handleSendMessage} disabled={loadingMessages}>
                Send
            </Button>
            </Box>
            {messageError && <ErrorMessage message={messageError} />}
        </Box>
      </Paper>
    </Container>
  );
}

export default TicketDetails;

================
File: src/components/Tickets/TicketForm.jsx
================
import React, { useState } from 'react';
import { TextField, Button, Select, MenuItem, FormControl, InputLabel, Container, Typography, Box } from '@mui/material';

function TicketForm({ onSubmit, ticket, isCreate = true }) {
  const [title, setTitle] = useState(ticket ? ticket.title : '');
  const [type, setType] = useState(ticket ? ticket.type : '');
  const [status, setStatus] = useState(ticket ? ticket.status : 'OPEN'); // Default status
  const [assignedTo, setAssignedTo] = useState(ticket ? ticket.assignedTo || '' : ''); // Optional assignedTo

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');



  const handleSubmit = async (event) => {
    event.preventDefault();
    setError(''); //Clear previous error
    setLoading(true); // Start loading
    try {
      const ticketData = {
        title,
        type,
        ...(status && !isCreate && {status}),     
        ...(assignedTo && !isCreate && {assignedTo}) 
      };

      await onSubmit(ticketData);
        
    } catch (error) {
        setError(error.message || "Failed to submit the form. Try again.")
    } finally {
        setLoading(false);
    }

  };

  return (
    <Container component="main" maxWidth="xs">
        <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
        <Typography variant="h6">{isCreate ? "Create Ticket" : "Edit Ticket"}</Typography>

        <TextField
            margin="normal"
            required
            fullWidth
            id="title"
            label="Title"
            name="title"
            autoFocus
            value={title}
            onChange={(e) => setTitle(e.target.value)}
        />
        <FormControl fullWidth margin="normal" required>
            <InputLabel id="type-label">Type</InputLabel>
            <Select
                labelId="type-label"
                id="type"
                value={type}
                label="Type"
                onChange={(e) => setType(e.target.value)}
            >
                <MenuItem value="Complaint">Complaint</MenuItem>
                <MenuItem value="Request">Request</MenuItem>
                <MenuItem value="Inquiry">Inquiry</MenuItem>
            </Select>
        </FormControl>
            {/* Status and assignedTo fields) */}
            {!isCreate && (
              <>
                <FormControl fullWidth margin="normal" required>
                  <InputLabel id="status-label">Status</InputLabel>
                  <Select
                    labelId="status-label"
                    id="status"
                    value={status}
                    label="Status"
                    onChange={(e) => setStatus(e.target.value)}
                  >
                    <MenuItem value="OPEN">Open</MenuItem>
                    <MenuItem value="IN_PROGRESS">In Progress</MenuItem>
                    <MenuItem value="CLOSED">Closed</MenuItem>
                  </Select>
                </FormControl>

                <TextField
                  margin="normal"
                  fullWidth
                  id="assignedTo"
                  label="Assigned To (User ID)"
                  name="assignedTo"
                  value={assignedTo}
                  onChange={(e) => setAssignedTo(e.target.value)}
                />
              </>
            )}
        <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
            disabled={loading}
        >
            {isCreate ? 'Submit' : 'Update'}
        </Button>
      </Box>
    </Container>
  );
}

export default TicketForm;

================
File: src/components/Tickets/TicketItem.jsx
================
//in case we need TicketItem later
import React from 'react'
import { ListItem } from '@mui/material'

function TicketItem() {
  return (
    <ListItem>TicketItem</ListItem>
  )
}

export default TicketItem

================
File: src/components/Tickets/TicketList.jsx
================
import React from 'react';
import { List, ListItem, ListItemText, Divider, Chip } from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

function TicketList({ tickets }) {
  return (
    <List>
      {tickets.map((ticket) => (
        <React.Fragment key={ticket.id}>
          <ListItem
            alignItems="flex-start"
            component={RouterLink}
            to={`/ticket-management/${ticket.id}`} // link to individual ticket details
            sx={{ textDecoration: 'none' }}
          >
            <ListItemText
              primary={ticket.title}
              secondary={
                <>
                    {ticket.type} - {ticket.createdAt && new Date(ticket.createdAt).toLocaleDateString()}
                    <br />
                    <Chip label={ticket.status} color={
                        ticket.status === 'OPEN' ? 'primary' :
                        ticket.status === 'IN_PROGRESS' ? 'warning' :
                        'default'
                    } variant="outlined" size="small" sx={{mt: 0.5}}/>

                </>
              }
            />
          </ListItem>
          <Divider variant="inset" component="li" />
        </React.Fragment>
      ))}
    </List>
  );
}

export default TicketList;

================
File: src/components/Tickets/TicketManagement.jsx
================
import React, { useState, useEffect } from 'react';
import { getAllTickets, getUserTickets, updateTicket } from '../../services/tickets.service';
import TicketList from './TicketList';
import TicketForm from './TicketForm';
import { useAuth } from '../../context/AuthContext';
import { Container, Typography, Button } from '@mui/material';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';

function TicketManagement() {
  const [tickets, setTickets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { currentUser } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [currentTicket, setCurrentTicket] = useState(null);


  useEffect(() => {
    const fetchTickets = async () => {
      try {
        let fetchedTickets;
        if (currentUser.type === 'RESIDENT') {
          fetchedTickets = await getUserTickets();
        } else if (currentUser.type === 'EMPLOYEE' || currentUser.type === 'ADMIN') {
          fetchedTickets = await getAllTickets();
        } else {
          setError('Unauthorized to view tickets.');
          return;
        }
        setTickets(fetchedTickets);
      } catch (err) {
        setError('Failed to load tickets.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    if (currentUser) {
      fetchTickets();
    }
  }, [currentUser]);


  const handleUpdateTicket = async (updatedTicketData) => {
    try {
      await updateTicket(currentTicket.id, updatedTicketData);
        setTickets(prevTickets =>
            prevTickets.map(t => (t.id === currentTicket.id ? { ...t, ...updatedTicketData } : t))
        );
      setIsEditing(false);
      setCurrentTicket(null);
    } catch (error) {
      console.error("Failed to update ticket", error);
      setError("Failed to update ticket.");
    }
  };

  const handleEdit = (ticket) => {
    setCurrentTicket(ticket);
    setIsEditing(true);
  }
    const handleCloseEdit = () => {
        setIsEditing(false);
        setCurrentTicket(null);
    }

    if (loading || !currentUser) {
        return <Loader />;
    }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        {currentUser.type === 'RESIDENT' ? 'My Tickets' : 'All Tickets'}
      </Typography>
      <TicketList tickets={tickets} />
        {(currentUser.type === 'EMPLOYEE' || currentUser.type === 'ADMIN') && (
        <>
          <Button onClick={() => setIsEditing(true)}>Edit Ticket</Button>
            {isEditing && (
              <>
                <TicketForm onSubmit={handleUpdateTicket} ticket={currentTicket} isCreate={false} />
                <Button onClick={handleCloseEdit}>Cancel</Button>
                </>
            )}
        </>
      )}
    </Container>
  );
}

export default TicketManagement;

================
File: src/components/UI/ErrorMessage.jsx
================
import React from 'react';
import Alert from '@mui/material/Alert';

function ErrorMessage({ message }) {
    return (
        message ? <Alert severity="error">{message}</Alert> : null
    );
}

export default ErrorMessage;

================
File: src/components/UI/Loader.jsx
================
import React from 'react';
import CircularProgress from '@mui/material/CircularProgress';
import Box from '@mui/material/Box';

function Loader() {
  return (
    <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
      <CircularProgress />
    </Box>
  );
}

export default Loader;

================
File: src/components/UI/Modal.jsx
================
import React from 'react';
import MuiModal from '@mui/material/Modal';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
};

function Modal({ open, onClose, title, children, onConfirm, confirmText = "Confirm", showConfirm = true }) {
  return (
    <MuiModal
      open={open}
      onClose={onClose}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Box sx={style}>
        <Typography id="modal-modal-title" variant="h6" component="h2">
          {title}
        </Typography>
        <Box id="modal-modal-description" sx={{ mt: 2 }}>
          {children}
        </Box>
        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>
          <Button onClick={onClose} sx={{ mr: 2 }}>
            Cancel
          </Button>
          {showConfirm && (<Button variant="contained" onClick={onConfirm}>
            {confirmText}
          </Button>)}
        </Box>
      </Box>
    </MuiModal>
  );
}

export default Modal;

================
File: src/components/UI/PrivateRoute.jsx
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

function PrivateRoute({ children, roles, redirectTo = '/sign-in' }) {
  const { currentUser, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>;
  }

  // If not authenticated redirect to the specified route
  if (!currentUser) {
    return <Navigate to={redirectTo} replace />;
  }

  // If roles are specified and the user doesn't have the required role redirect to home
  if (roles && !roles.includes(currentUser.type)) {
    return <Navigate to="/" replace />; // Redirect  "not authorized" page
  }

  // If authenticated and authorized render the children
  return children;
}

export default PrivateRoute;

================
File: src/components/Users/UserDetails.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getUserById, updateUser, deleteUser } from '../../services/users.service';
import {
    Container,
    Typography,
    Paper,
    TextField,
    Button,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Box,
  } from '@mui/material';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';
import { useAuth } from '../../context/AuthContext';
import Modal from '../UI/Modal'; // Import the Modal component

function UserDetails() {
    const { id } = useParams();
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const navigate = useNavigate();
    const { currentUser } = useAuth();

    const [editMode, setEditMode] = useState(false);  // State for edit mode
    const [editedUser, setEditedUser] = useState({});   // State for storing edited user data

    const [deleteConfirmation, setDeleteConfirmation] = useState(false);

    useEffect(() => {
        const fetchUser = async () => {
            try {
                const fetchedUser = await getUserById(id);
                if (fetchedUser) {
                    setUser(fetchedUser);
                    setEditedUser(fetchedUser); // Initialize editedUser
                } else {
                    setError('User not found.');
                }
            } catch (err) {
                setError('Failed to load user details.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchUser();
    }, [id]);

    const handleEdit = () => {
        setEditMode(true); // Switch on
    };

    const handleCancel = () => {
        setEditMode(false);       // Switch off
        setEditedUser(user);    // Reset any changes
    }

    const handleSave = async () => {
        try {
            await updateUser(id, editedUser); //update db
            setUser(editedUser);        // Update the state with new details
            setEditMode(false);         // Switch off edit
        } catch (error) {
            setError("Failed to update User.");
        }
    };

    const handleDelete = async () => {
        try {
            await deleteUser(id);
            setDeleteConfirmation(false); // Close
            navigate('/admin/user-management'); // Redirect
        } catch (error) {
            console.error('Failed to delete user:', error);
            setError('Failed to delete user.  Check server logs.');
        }
    }
    const openDeleteConfirmation = () => {
        setDeleteConfirmation(true);
    }

    const closeDeleteConfirmation = () => {
        setDeleteConfirmation(false);
    }

    if (loading) {
        return <Loader />;
    }

    if (error) {
        return <ErrorMessage message={error} />;
    }

    if (!user) {
        return <Typography>User not found.</Typography>;
    }

  return (
    <Container component="main" maxWidth="sm">
        <Paper elevation={3} sx={{ padding: 3, marginTop: 2 }}>
            <Typography variant="h4" gutterBottom>
            User Details
            </Typography>
            {error && <ErrorMessage message={error} />}

            {/* Display User Information read only */}
            {!editMode && (
            <>
                <Typography variant="h6">Name: {user.firstName} {user.lastName}</Typography>
                <Typography variant="body1">Email: {user.email}</Typography>
                <Typography variant="body1">Phone: {user.phone || 'N/A'}</Typography>
                <Typography variant="body1">Address: {user.address || 'N/A'}</Typography>
                <Typography variant="body1">Type: {user.type}</Typography>

                {currentUser.type === "ADMIN" && (
                <>
                <Button variant="contained" color="primary" onClick={handleEdit} sx={{ mr: 2 }}>
                    Edit
                </Button>
                <Button variant="contained" color="error" onClick={openDeleteConfirmation}>
                    Delete
                </Button>
                </>)}
            </>
            )}

            {/* Edit Form Conditional Rendering */}
            {editMode && (
            <Box component="form" sx={{ mt: 2 }}>
                <TextField
                    margin="normal"
                    fullWidth
                    label="First Name"
                    value={editedUser.firstName || ''}
                    onChange={(e) => setEditedUser({ ...editedUser, firstName: e.target.value })}
                />
                <TextField
                margin="normal"
                fullWidth
                label="Last Name"
                value={editedUser.lastName || ''}
                onChange={(e) => setEditedUser({ ...editedUser, lastName: e.target.value })}
                />
                <TextField
                margin="normal"
                fullWidth
                label="Email"
                value={user.email} // Email is NOT editable
                disabled
                />
                <TextField
                margin="normal"
                fullWidth
                label="Phone"
                value={editedUser.phone || ''}
                onChange={(e) => setEditedUser({ ...editedUser, phone: e.target.value })}
                />
                <TextField
                margin="normal"
                fullWidth
                label="Address"
                value={editedUser.address || ''}
                onChange={(e) => setEditedUser({ ...editedUser, address: e.target.value })}
                />

                <FormControl fullWidth margin="normal">
                <InputLabel id="user-type-label">User Type</InputLabel>
                <Select
                    labelId="user-type-label"
                    id="user-type"
                    value={editedUser.type}
                    label="User Type"
                    onChange={(e) => setEditedUser({ ...editedUser, type: e.target.value })}
                >
                    <MenuItem value="RESIDENT">Resident</MenuItem>
                    <MenuItem value="EMPLOYEE">Employee</MenuItem>
                    <MenuItem value="ADMIN">Admin</MenuItem>
                </Select>
                </FormControl>
                <Box sx={{ mt: 2 }}>
                <Button variant="contained" color="primary" onClick={handleSave} sx={{ mr: 2 }}>
                    Save
                </Button>
                <Button variant="outlined" onClick={handleCancel}>
                    Cancel
                </Button>
                </Box>
            </Box>
            )}
        </Paper>
        <Modal
            open={deleteConfirmation}
            onClose={closeDeleteConfirmation}
            title="Confirm Delete"
            onConfirm={handleDelete}
            confirmText="Delete"
        >
            Are you sure you want to delete this user? This action is irreversible.
        </Modal>
    </Container>
  );
}

export default UserDetails;

================
File: src/components/Users/UserItem.jsx
================
import React from 'react';
import { ListItem, ListItemAvatar, Avatar, ListItemText } from '@mui/material';
import PersonIcon from '@mui/icons-material/Person';
import { Link as RouterLink } from 'react-router-dom';

function UserItem({ user }) {
  return (
    <ListItem
      button
      component={RouterLink}
      to={`/admin/user-management/${user.id}`}
      sx={{ textDecoration: 'none' }}
    >
      <ListItemAvatar>
        <Avatar>
          <PersonIcon />
        </Avatar>
      </ListItemAvatar>
      <ListItemText
        primary={`${user.firstName} ${user.lastName}`}
        secondary={user.email}
      />
    </ListItem>
  );
}

export default UserItem;

================
File: src/components/Users/UserList.jsx
================
import React from 'react';
import { ListItem, ListItemAvatar, Avatar, ListItemText } from '@mui/material';
import PersonIcon from '@mui/icons-material/Person';
import { Link as RouterLink } from 'react-router-dom';

function UserItem({ user }) {
  return (
    <ListItem
      button
      component={RouterLink}
      to={`/admin/user-management/${user.id}`}
      sx={{ textDecoration: 'none' }}
    >
      <ListItemAvatar>
        <Avatar>
          <PersonIcon />
        </Avatar>
      </ListItemAvatar>
      <ListItemText
        primary={`${user.firstName} ${user.lastName}`}
        secondary={user.email}
      />
    </ListItem>
  );
}

export default UserItem;

================
File: src/components/Users/UserManagement.jsx
================
import React, { useState, useEffect } from 'react';
import { getAllUsers } from '../../services/users.service';
import UserList from './UserList';
import { Container, Typography } from '@mui/material';
import Loader from '../UI/Loader';
import ErrorMessage from '../UI/ErrorMessage';

function UserManagement() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const fetchedUsers = await getAllUsers();
        setUsers(fetchedUsers);
      } catch (err) {
        setError('Failed to load users.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        User Management
      </Typography>
      <UserList users={users} />
    </Container>
  );
}

export default UserManagement;

================
File: src/context/AuthContext.jsx
================
// src/context/AuthContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { auth } from '../firebase';
import { onAuthStateChanged } from 'firebase/auth';
import axios from 'axios';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialLoad, setInitialLoad] = useState(true); // New state variable

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        try {
          // set Authorization header for all axios requests
          const idToken = await user.getIdToken();
          axios.defaults.headers.common['Authorization'] = `Bearer ${idToken}`;

          // only fetch profile if NOT the initial load ***
          if (!initialLoad) {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/auth/profile`);
            setCurrentUser(response.data.data.user);
          }

        } catch (error) {
          console.error("Error fetching user profile:", error);
          setCurrentUser(null); // Still set to null on error
        }
      } else {
        setCurrentUser(null);
        delete axios.defaults.headers.common["Authorization"];
      }
        setLoading(false);
        setInitialLoad(false) //  initial load is complete
    });

    return unsubscribe;
  }, [initialLoad]); // Depend on initialLoad

    const value = {
        currentUser,
        loading
    };

    return (
        <AuthContext.Provider value={value}>
            {!loading && children}
        </AuthContext.Provider>
    );
};

================
File: src/firebase.js
================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "AIzaSyBRCe6TgKSTe3Liem329Vcy1x_56vkRRHQ",
  authDomain: "barangay-info-its120l.firebaseapp.com",
  projectId: "barangay-info-its120l",
  storageBucket: "barangay-info-its120l.firebasestorage.app",
  messagingSenderId: "738641037249",
  appId: "1:738641037249:web:3d4b44dbcce3e8d0185140"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

export { auth };

================
File: src/index.jsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/global.css'; // Import global styles
import './styles/theme.js';   // Import MUI theme setup
import App from './App';
// import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ThemeProvider } from '@mui/material/styles';
import theme from './styles/theme'; // Import the MUI theme

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <ThemeProvider theme={theme}> {/* ThemeProvider */}
          <App />
        </ThemeProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

// reportWebVitals();

================
File: src/pages/AccountManagement.jsx
================
import React from 'react';
import { Container, Typography, Paper,  } from '@mui/material';
import { useAuth } from '../context/AuthContext';


function AccountManagement() {
    const {currentUser} = useAuth();

  return (
    <Container component="main" maxWidth="md">
        <Paper elevation={3} sx={{padding: 3, marginTop: 4}}>
            <Typography variant="h4" gutterBottom>
                Account Management
            </Typography>
            {currentUser ? (
                <>
                    <Typography variant='h6'>
                        Name: {currentUser.firstName} {currentUser.lastName}
                    </Typography>
                    <Typography variant='body1'>
                        Email: {currentUser.email}
                    </Typography>
                    <Typography variant='body1'>
                        Phone: {currentUser.phone || "N/A"}
                    </Typography>
                    <Typography variant='body1'>
                        Address: {currentUser.address || "N/A"}
                    </Typography>
                    {/* todo */}
                </>
            ) : (
                <Typography>
                    You are not logged in.
                </Typography>
            )}
        </Paper>
    </Container>
  )
}

export default AccountManagement

================
File: src/pages/ArticlePageManagementPage.jsx
================
import React from 'react';
import ArticlePageManagement from '../components/News/ArticlePageManagement';
import Container from '@mui/material/Container';

function ArticlePageManagementPage() {
    return (
        <Container>
            <ArticlePageManagement />
        </Container>
    );
}

export default ArticlePageManagementPage;

================
File: src/pages/FormsManagementPage.jsx
================
import React from 'react';
import FormManagement from '../components/Forms/FormManagement';
import Container from '@mui/material/Container';

function FormsManagementPage() {
  return (
    <Container>
      <FormManagement />
    </Container>
  );
}

export default FormsManagementPage;

================
File: src/pages/FormsPage.jsx
================
import React, { useState, useEffect } from 'react';
import { getAllForms } from '../services/forms.service';
import FormList from '../components/Forms/FormList';
import { Container, Typography } from '@mui/material';
import Loader from '../components/UI/Loader';
import ErrorMessage from '../components/UI/ErrorMessage';

function FormsPage() {
  const [forms, setForms] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchForms = async () => {
      try {
        const fetchedForms = await getAllForms();
        setForms(fetchedForms);
      } catch (err) {
        setError('Failed to load forms.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchForms();
  }, []);

  if (loading) {
    return <Loader />;
  }

    if (error) {
        return <ErrorMessage message={error}/>
    }

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Available Forms
      </Typography>
      {forms.length > 0 ? (
        <FormList forms={forms} />
        ) : (
        <Typography>No forms available at this time.</Typography>
      )}
    </Container>
  );
}

export default FormsPage;

================
File: src/pages/GeneralPageManagementPage.jsx
================
import React from 'react';
import GeneralPageManagement from '../components/Pages/GeneralPageManagement';
import Container from '@mui/material/Container';

function GeneralPageManagementPage() {
  return (
    <Container>
      <GeneralPageManagement />
    </Container>
  );
}

export default GeneralPageManagementPage;

================
File: src/pages/Home.jsx
================
import React, { useState, useEffect } from 'react';
import { getPageBySlug } from '../services/pages.service';
import { Container, Typography } from '@mui/material';
import Loader from '../components/UI/Loader'; 
import ErrorMessage from '../components/UI/ErrorMessage';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';


function Home() {
  const [pageContent, setPageContent] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchHomePage = async () => {
      try {
        const page = await getPageBySlug('home');
        if (page) {
          setPageContent(page.content);
        } else {
          setError('Home page content not found.');
        }
      } catch (err) {
        setError('Failed to load home page content.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchHomePage();
  }, []);

  if (loading) {
    return <Loader />; //  loader while fetching
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  return (
    <Container>
      <Typography variant="h1" gutterBottom>
        Welcome to the Barangay!
      </Typography>
      <ReactMarkdown remarkPlugins={[gfm]}>{pageContent}</ReactMarkdown>
    </Container>
  );
}

export default Home;

================
File: src/pages/NewsPage.jsx
================
import React, { useState, useEffect } from 'react';
import { getAllPages } from '../services/pages.service';
import ArticleList from '../components/News/ArticleList';
import { Container, Typography } from '@mui/material';
import Loader from '../components/UI/Loader';
import ErrorMessage from '../components/UI/ErrorMessage';
import { Route, Routes } from 'react-router-dom';
import ArticleItem from '../components/News/ArticleItem';

function NewsPage() {
    const [articles, setArticles] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchArticles = async () => {
            try {
                const allPages = await getAllPages();
                const filteredArticles = allPages.filter(page => page.type === 'ARTICLE');
                setArticles(filteredArticles);
            } catch (err) {
                setError('Failed to load articles.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchArticles();
    }, []);

    if (loading) {
      return <Loader />;
    }

    if (error) {
      return <ErrorMessage message={error} />;
    }

    return (
        <Container>
            <Routes>
                <Route path="/" element={
                    <>
                    <Typography variant="h4" gutterBottom>News Articles</Typography>
                    <ArticleList articles={articles} />
                    </>
                } />
                <Route path="/:slug" element={<ArticleItem />} />
            </Routes>
        </Container>
    );
}

export default NewsPage;

================
File: src/pages/Officials.jsx
================
import React, { useState, useEffect } from 'react';
import { getPageBySlug } from '../services/pages.service';
import { Container, Typography } from '@mui/material';
import Loader from '../components/UI/Loader';
import ErrorMessage from '../components/UI/ErrorMessage';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';

function Officials() {
  const [pageContent, setPageContent] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchPage = async () => {
      try {
        const page = await getPageBySlug('officials');
        if (page) {
          setPageContent(page.content);
        } else {
          setError('Officials page content not found.');
        }
      } catch (err) {
        setError('Failed to load officials page content.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchPage();
  }, []);

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return <ErrorMessage message={error} />;
  }

  return (
    <Container>
      <Typography variant="h1" gutterBottom>
        Barangay Officials
      </Typography>
      <ReactMarkdown remarkPlugins={[gfm]}>{pageContent}</ReactMarkdown>
    </Container>
  );
}

export default Officials;

================
File: src/pages/Register.jsx
================
import React from 'react';
import RegisterForm from '../components/Auth/RegisterForm';
import Container from '@mui/material/Container';

function Register() {
  return (
    <Container component="main" maxWidth="md">
        <RegisterForm />
    </Container>
  );
}

export default Register;

================
File: src/pages/SignIn.jsx
================
import React from 'react';
import LoginForm from '../components/Auth/LoginForm';
import Container from '@mui/material/Container';

function SignIn() {
  return (
    <Container component="main" maxWidth="md">
        <LoginForm />
    </Container>
  );
}

export default SignIn;

================
File: src/pages/SiteSettingsManagement.jsx
================
import React from 'react';
import SettingsForm from '../components/Settings/SettingsForm';
import Container from '@mui/material/Container';

function SiteSettingsManagement() {
  return (
    <Container>
      <SettingsForm />
    </Container>
  );
}

export default SiteSettingsManagement;

================
File: src/pages/SubmitTicket.jsx
================
import React from 'react';
import TicketForm from '../components/Tickets/TicketForm';
import { createTicket } from '../services/tickets.service';
import { useNavigate } from 'react-router-dom';
import { Container, Typography } from '@mui/material';
import { useAuth } from '../context/AuthContext';

function SubmitTicket() {
    const navigate = useNavigate();
    const {currentUser} = useAuth();

    const handleSubmit = async (ticketData) => {
        try {
            const newTicketId = await createTicket(ticketData);
            navigate(`/ticket-management/${newTicketId}`); //redirect to ticket created
        } catch (error) {
            console.error("Failed to create ticket:", error);
        }
    };
    
    return (
        <Container>
            <Typography variant='h4'>
                Submit a Ticket
            </Typography>
            <TicketForm onSubmit={handleSubmit} />
        </Container>
    )
}

export default SubmitTicket

================
File: src/pages/TicketManagementPage.jsx
================
import React from 'react';
import TicketManagement from '../components/Tickets/TicketManagement';
import Container from '@mui/material/Container';

function TicketManagementPage() {
    return(
        <Container>
            <TicketManagement />
        </Container>
    )
}

export default TicketManagementPage

================
File: src/pages/UserManagementPage.jsx
================
import React from 'react';
import UserManagement from '../components/Users/UserManagement';
import Container from '@mui/material/Container';

function UserManagementPage() {
    return (
        <Container>
            <UserManagement />
        </Container>
    )
}

export default UserManagementPage

================
File: src/services/auth.service.js
================
import { auth } from '../firebase';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendEmailVerification } from 'firebase/auth';
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const signUp = async (email, password, firstName, lastName, phone, address) => {
    try {
        const { user } = await createUserWithEmailAndPassword(auth, email, password);

        await axios.post(`${API_BASE_URL}/auth/signup`, {
            email: user.email,
            password,
            firstName,
            lastName,
            phone,
            address,
        });
        
    return user;
    } catch (error) {
        throw error;
    }
};

export const signIn = async (email, password) => {
    try {
      const { user } = await signInWithEmailAndPassword(auth, email, password);
      const idToken = await user.getIdToken();
      await axios.post(`${API_BASE_URL}/auth/signin`, { email, password });
      return user;
    } catch (error) {
        throw error;
    }
};

export const signOutUser = async () => {
  try {
    await signOut(auth);
  } catch (error) {
    throw error;
  }
};


export const getUserProfile = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/auth/profile`);
    return response.data.data.user;
  } catch (error) {
    throw error;
  }
}


const authService = { signUp, signIn, signOutUser, getUserProfile };
export default authService;

================
File: src/services/chat.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const sendMessageToChatbot = async (message) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/chat`, { message });
    return response.data.data.response;
  } catch (error) {
    throw error;
  }
};

const chatService = { sendMessageToChatbot };
export default chatService;

================
File: src/services/forms.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const createForm = async (formData) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/forms`, formData);
    return response.data.data.id;
  } catch (error) {
    throw error;
  }
};

export const getFormById = async (id) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/forms/${id}`);
    return response.data.data.form;
  } catch (error) {
    throw error;
  }
};

export const getAllForms = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/forms`);
    return response.data.data.forms;
  } catch (error) {
    throw error;
  }
};

export const updateForm = async (id, formData) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/forms/${id}`, formData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteForm = async (id) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/forms/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const formsService = { createForm, getFormById, getAllForms, updateForm, deleteForm };
export default formsService;

================
File: src/services/messages.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const createMessage = async (ticketId, content) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/messages`, { ticketId, content });
    return response.data.data.id;
  } catch (error) {
    throw error;
  }
};

export const getMessagesByTicketId = async (ticketId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/messages/ticket/${ticketId}`);
    return response.data.data.messages;
  } catch (error) {
    throw error;
  }
};

export const getMessageById = async (id) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/messages/${id}`);
        return response.data.data.message;
    } catch (error) {
        throw error;
    }
}

export const updateMessage = async (id, content) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/messages/${id}`, { content });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteMessage = async (id) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/messages/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const messagesService = { createMessage, getMessagesByTicketId, getMessageById, updateMessage, deleteMessage };
export default messagesService;

================
File: src/services/pages.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const createPage = async (pageData) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/pages`, pageData);
    return response.data.data.id;
  } catch (error) {
    throw error;
  }
};

export const getPageBySlug = async (slug) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/pages/${slug}`);
    return response.data.data.page;
  } catch (error) {
    throw error;
  }
};

export const getAllPages = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/pages`);
    return response.data.data.pages;
  } catch (error) {
    throw error;
  }
};

export const updatePage = async (slug, pageData) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/pages/${slug}`, pageData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deletePage = async (slug) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/pages/${slug}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const pagesService = { createPage, getPageBySlug, getAllPages, updatePage, deletePage };
export default pagesService;

================
File: src/services/settings.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const getSettings = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/settings`);
    return response.data.data.settings;
  } catch (error) {
    throw error;
  }
};

export const updateSettings = async (settingsData) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/settings`, settingsData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const settingsService = {getSettings, updateSettings}
export default settingsService;

================
File: src/services/tickets.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const createTicket = async (ticketData) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/tickets`, ticketData);
    return response.data.data.id;
  } catch (error) {
    throw error;
  }
};

export const getTicketById = async (id) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/tickets/${id}`);
    return response.data.data.ticket;
  } catch (error) {
    throw error;
  }
};

export const getAllTickets = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/tickets`);
    return response.data.data.tickets;
  } catch (error) {
    throw error;
  }
};

export const getUserTickets = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/tickets/my/all`);
        return response.data.data.tickets;
    } catch (error) {
        throw error;
    }
};

export const updateTicket = async (id, ticketData) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/tickets/${id}`, ticketData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteTicket = async (id) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/tickets/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const ticketsService = { createTicket, getTicketById, getAllTickets, getUserTickets, updateTicket, deleteTicket };
export default ticketsService;

================
File: src/services/users.service.js
================
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const getUserById = async (id) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/users/${id}`);
    return response.data.data.user;
  } catch (error) {
    throw error;
  }
};

export const getAllUsers = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/users`);
    return response.data.data.users; // Return the array of users
  } catch (error) {
    throw error;
  }
};
export const getResidents = async () => {
    try{
        const response = await axios.get(`${API_BASE_URL}/users/type/resident`);
        return response.data.data.residents;
    } catch (error) {
        throw error;
    }
}

export const updateUser = async (id, userData) => {
  try {
    const response = await axios.put(`${API_BASE_URL}/users/${id}`, userData);
    return response.data; // Return the success response
  } catch (error) {
    throw error;
  }
};

export const deleteUser = async (id) => {
  try {
    const response = await axios.delete(`${API_BASE_URL}/users/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

const usersService = { getUserById, getAllUsers, getResidents, updateUser, deleteUser };
export default usersService;

================
File: src/styles/global.css
================
body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: #f4f4f4; /* Light grey background */
    color: #333; /* Dark grey text */
  }
  
  code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }
  
  .MuiButton-root {
    text-transform: none; /* Prevent MUI buttons from being all caps */
  }

================
File: src/styles/theme.js
================
import { createTheme } from '@mui/material/styles';
import { red } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      main: '#556cd6', 
    },
    secondary: {
      main: '#19857b',
    },
    error: {
      main: red.A400,
    },
    background: {
      default: '#fafafa', // Light background for pages
      paper: '#ffffff',   // White background for cards, modals etc.
    },
  },
  typography: {
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',

},
  components: {
    MuiAppBar: {
      defaultProps: {
        position: 'fixed',
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 4,
          fontWeight: 500,
        },
      },
    },
  },
});

export default theme;

================
File: src/utils.js
================
export const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
};



================================================================
End of Codebase
================================================================
