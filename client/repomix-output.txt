This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
package.json
public/index.html
src/api/articles.js
src/api/auth.js
src/api/chat.js
src/api/config.js
src/api/firebase.js
src/api/forms.js
src/api/index.js
src/api/messages.js
src/api/pages.js
src/api/settings.js
src/api/tickets.js
src/api/users.js
src/App.js
src/components/Chatbot/ChatbotWidget.js
src/components/Layouts/AdminLayout.js
src/components/Layouts/Footer.js
src/components/Layouts/PublicLayout.js
src/components/Layouts/UserLayout.js
src/components/Management/ManagementDetail.js
src/components/Management/ManagementForm.js
src/components/Management/ManagementList.js
src/components/Management/ManagementPage.js
src/components/Navigation/AdminNav.js
src/components/Navigation/AnnouncementBar.js
src/components/Navigation/NavBar.js
src/components/Navigation/NavButton.js
src/components/Navigation/PublicNav.js
src/components/Navigation/TopBar.js
src/components/Navigation/UserDisplay.js
src/components/Navigation/UserNav.js
src/components/UI/Banner.js
src/components/UI/ConfirmDialog.js
src/components/UI/ErrorMessage.js
src/components/UI/LoadingSpinner.js
src/contexts/AuthContext.js
src/hooks/useApi.js
src/hooks/useAuth.js
src/index.js
src/pages/Admin/Articles.js
src/pages/Admin/Forms.js
src/pages/Admin/Home.js
src/pages/Admin/Pages.js
src/pages/Admin/Settings.js
src/pages/Admin/Tickets.js
src/pages/Admin/Users.js
src/pages/Auth/Login.js
src/pages/Auth/Signup.js
src/pages/Auth/UserProfile.js
src/pages/Public/ArticleDetail.js
src/pages/Public/Articles.js
src/pages/Public/Contact.js
src/pages/Public/FormDetail.js
src/pages/Public/Forms.js
src/pages/Public/Home.js
src/pages/Public/Officials.js
src/pages/Public/PageDetail.js
src/pages/Shared/TicketMessages.js
src/pages/User/Home.js
src/pages/User/Tickets.js
src/theme.js
src/utils/dateUtils.js

================================================================
Files
================================================================

================
File: package.json
================
{
  "name": "barangay-client",
  "version": "1.0.0",
  "description": "Client for barangay",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.18",
    "@mui/material": "^5.14.18",
    "axios": "^1.6.2",
    "dompurify": "^3.0.6",
    "draft-js": "^0.11.7",
    "draftjs-to-html": "^0.9.1",
    "firebase": "^10.6.0",
    "framer-motion": "^12.4.11",
    "html-react-parser": "^5.2.2",
    "html-to-draftjs": "^1.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-draft-wysiwyg": "^1.15.0",
    "react-firebase-hooks": "^5.1.1",
    "react-quill": "^2.0.0",
    "react-router-dom": "^6.19.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />

    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

    <!-- custom jakarta google font  -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">

    <title>Brgy. San Antonio, Candon City</title>
  </head>
  <body style="margin:0;">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>

  </body>
</html>

================
File: src/api/articles.js
================
import api from "./index";

export const getArticles = async () => {
  try {
    const response = await api.get("/articles");
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const getArticle = async (id) => {
  try {
    const response = await api.get(`/articles/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const createArticle = async (data) => {
  try {
    const response = await api.post("/articles", data);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const updateArticle = async (id, data) => {
  try {
    const response = await api.put(`/articles/${id}`, data);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteArticle = async (id) => {
  try {
    await api.delete(`/articles/${id}`);
    // no data to return, deletion successful if no error is thrown
  } catch (error) {
    throw error;
  }
};

================
File: src/api/auth.js
================
import api from "./index";

export const register = async (userData) => {
  try {
    const response = await api.post("/auth/register", userData);
    return response.data.data; // backend returns { success: true, data: userResult }
  } catch (error) {
    throw error;
  }
};

export const me = async () => {
  try {
    const response = await api.get("/auth/me");
    return response.data; // backend returns the user object directly
  } catch (error) {
    throw error;
  }
};

================
File: src/api/chat.js
================
import api from "./index";

export const sendMessage = async (data) => {
  // changed to async to handle promises correctly
  try {
    const response = await api.post("/chat", data);
    return response.data;
  } catch (error) {
    throw error;
  }
};

================
File: src/api/config.js
================
export const baseURL =
  "https://sanantonio-candoncity-728827279710.asia-east1.run.app/api/v1/";

export const firebaseConfig = {
  apiKey: "AIzaSyCc4Zzr1q4-mKp1IFltTO1hJFS_fpHZxxk",
  authDomain: "brgy-san-antonio-its122l.firebaseapp.com",
  projectId: "brgy-san-antonio-its122l",
  storageBucket: "brgy-san-antonio-its122l.firebasestorage.app",
  messagingSenderId: "505564118785",
  appId: "1:505564118785:web:dc2cb8d8fa7045a3c7a500",
};

================
File: src/api/firebase.js
================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore"; // still keeping firestore import, might be used later or remove if completely unused
import { firebaseConfig } from "./config";

// initialize firebase
const app = initializeApp(firebaseConfig);
const authInstance = getAuth(app); // renamed to authinstance to avoid confusion with backend auth
const db = getFirestore(app); // keeping db initialization in case firestore is still needed

export { authInstance as auth, db }; // export authinstance as 'auth' to keep existing imports working, and db if needed.

================
File: src/api/forms.js
================
import api from "./index";

export const getForms = async () => {
  try {
    const response = await api.get("/forms");
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const getForm = async (id) => {
  try {
    const response = await api.get(`/forms/${id}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const createForm = async (data) => {
  try {
    const response = await api.post("/forms", data);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const updateForm = async (id, data) => {
  try {
    const response = await api.put(`/forms/${id}`, data);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteForm = async (id) => {
  try {
    await api.delete(`/forms/${id}`);
    // deletion successful if no error
  } catch (error) {
    throw error;
  }
};

================
File: src/api/index.js
================
import axios from "axios";
import { auth } from "./firebase";
import { baseURL } from "./config";

const api = axios.create({
  baseURL: baseURL,
  timeout: 10000,
});

// request interceptor to add the firebase id token to the authorization header
api.interceptors.request.use(
  async (config) => {
    const currentUser = auth.currentUser; // use auth.currentuser instead of auth.user
    if (currentUser) {
      try {
        const token = await currentUser.getIdToken(true);
        config.headers.Authorization = `Bearer ${token}`;
      } catch (error) {
        console.error("Error getting ID token:", error);
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  },
);

export default api;

================
File: src/api/messages.js
================
import api from "./index";

export const getMessages = async () => {
  try {
    const response = await api.get("/messages");
    return response.data; // backend returns messages array
  } catch (error) {
    throw error;
  }
};

export const getMessage = async (id) => {
  try {
    const response = await api.get(`/messages/${id}`);
    return response.data; // backend returns message object
  } catch (error) {
    throw error;
  }
};

// no getmessagesbyticketid, as the server handles filtering

export const createMessage = async (data) => {
  try {
    const response = await api.post("/messages", data);
    return response.data; // backend returns created message object
  } catch (error) {
    throw error;
  }
};

export const updateMessage = async (id, data) => {
  try {
    const response = await api.put(`/messages/${id}`, data);
    return response.data; // backend returns updated message object
  } catch (error) {
    throw error;
  }
};

export const deleteMessage = async (id) => {
  try {
    await api.delete(`/messages/${id}`);
    // deletion successful if no error
  } catch (error) {
    throw error;
  }
};

================
File: src/api/pages.js
================
import api from "./index";

export const getPages = async () => {
  try {
    const response = await api.get("/pages");
    return response.data; // backend returns pages array
  } catch (error) {
    throw error;
  }
};

export const getPage = async (id) => {
  try {
    const response = await api.get(`/pages/${id}`);
    return response.data; // backend returns page object
  } catch (error) {
    throw error;
  }
};

export const createPage = async (data) => {
  try {
    const response = await api.post("/pages", data);
    return response.data; // backend returns created page object
  } catch (error) {
    throw error;
  }
};

export const updatePage = async (id, data) => {
  try {
    const response = await api.put(`/pages/${id}`, data);
    return response.data; // backend returns updated page object
  } catch (error) {
    throw error;
  }
};

export const deletePage = async (id) => {
  try {
    await api.delete(`/pages/${id}`);
    // deletion successful if no error
  } catch (error) {
    throw error;
  }
};

================
File: src/api/settings.js
================
import api from "./index";

export const getSettings = async () => {
  try {
    const response = await api.get("/settings");
    return response.data; // backend returns settings object
  } catch (error) {
    throw error;
  }
};

export const updateSettings = async (data) => {
  try {
    const response = await api.put("/settings", data);
    return response.data; // backend returns updated settings object
  } catch (error) {
    throw error;
  }
};

================
File: src/api/tickets.js
================
import api from "./index";

export const getTickets = async () => {
  try {
    const response = await api.get("/tickets");
    return response.data; // backend returns tickets array
  } catch (error) {
    throw error;
  }
};

export const getTicket = async (id) => {
  try {
    const response = await api.get(`/tickets/${id}`);
    return response.data; // backend returns ticket object
  } catch (error) {
    throw error;
  }
};

export const createTicket = async (data) => {
  try {
    const response = await api.post("/tickets", data);
    return response.data; // backend returns created ticket object
  } catch (error) {
    throw error;
  }
};

export const updateTicket = async (id, data) => {
  try {
    const response = await api.put(`/tickets/${id}`, data);
    return response.data; // backend returns updated ticket object
  } catch (error) {
    throw error;
  }
};

export const deleteTicket = async (id) => {
  try {
    await api.delete(`/tickets/${id}`);
    // deletion successful if no error
  } catch (error) {
    throw error;
  }
};

================
File: src/api/users.js
================
import api from "./index";

export const getUsers = async () => {
  try {
    const response = await api.get("/users");
    return response.data; // backend returns users array
  } catch (error) {
    throw error;
  }
};

export const getUser = async (id) => {
  try {
    const response = await api.get(`/users/${id}`);
    return response.data; // backend returns user object
  } catch (error) {
    throw error;
  }
};

export const updateUser = async (id, data) => {
  try {
    const response = await api.put(`/users/${id}`, data);
    return response.data; // backend returns updated user object
  } catch (error) {
    throw error;
  }
};

export const deleteUser = async (id) => {
  try {
    await api.delete(`/users/${id}`);
    // deletion successful if no error
  } catch (error) {
    throw error;
  }
};

export const getOfficials = async () => {
  try {
    const response = await api.get("/users/officials"); //remove auth
    return response.data;
  } catch (error) {
    throw error;
  }
};

// helper function to get users by type (for the ticket assignment dropdown)
export const getUsersByType = async (type) => {
  try {
    const response = await api.get(`/users?type=${type}`);
    return response.data; // backend returns users array filtered by type
  } catch (error) {
    throw error;
  }
};

================
File: src/App.js
================
// client/src/App.js
import React, { useState, useEffect } from "react"; // import usestate and useeffect
import { Routes, Route, Navigate, useLocation } from "react-router-dom";
import PublicLayout from "./components/Layouts/PublicLayout";
import AdminLayout from "./components/Layouts/AdminLayout";
import UserLayout from "./components/Layouts/UserLayout";
import HomePublic from "./pages/Public/Home";
import ArticlesPublic from "./pages/Public/Articles";
import ArticleDetailPublic from "./pages/Public/ArticleDetail";
import FormsPublic from "./pages/Public/Forms";
import FormDetailPublic from "./pages/Public/FormDetail";
import ContactPublic from "./pages/Public/Contact";
import OfficialsPublic from "./pages/Public/Officials";
import Login from "./pages/Auth/Login";
import Signup from "./pages/Auth/Signup";
import HomeAdmin from "./pages/Admin/Home";
import ArticlesAdmin from "./pages/Admin/Articles";
import PagesAdmin from "./pages/Admin/Pages";
import FormsAdmin from "./pages/Admin/Forms";
import TicketsAdmin from "./pages/Admin/Tickets";
import UsersAdmin from "./pages/Admin/Users";
import SettingsAdmin from "./pages/Admin/Settings";
import HomeUser from "./pages/User/Home";
import TicketsUser from "./pages/User/Tickets";
import TicketMessagesShared from "./pages/Shared/TicketMessages";
import { useAuth } from "./hooks/useAuth";
import ChatbotWidget from "./components/Chatbot/ChatbotWidget";
import UserProfile from "./pages/Auth/UserProfile";
import { getSettings } from "./api/settings";
import TopBar from "./components/Navigation/TopBar";
import AnnouncementBar from "./components/Navigation/AnnouncementBar";

function App() {
  const { user, userType, loading } = useAuth();
  const location = useLocation();
  const [announcementMessage, setAnnouncementMessage] = useState("");

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const settings = await getSettings();
        setAnnouncementMessage(settings.announcementText || "");
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };

    fetchSettings();
  }, []); // runs only once on mount

  if (loading) {
    return <div>Loading app...</div>;
  }

  // check if the current path is login or signup
  const isAuthPage =
    location.pathname === "/login" || location.pathname === "/signup";
  const homePageBanner =
    "https://i.ibb.co/BVxPjCrZ/475172880-122193205580173185-8945588955944178897-n.jpg"; // homepage banner url

  return (
    <>
      <AnnouncementBar announcementMessage={announcementMessage} />
      <Routes>
        {/* public routes wrapped in publiclayout conditionally */}
        <Route
          path="/"
          element={
            isAuthPage ? (
              <HomePublic />
            ) : (
              <PublicLayout bannerURL={homePageBanner} hasPadding={false}>
                <HomePublic />
              </PublicLayout>
            )
          }
        />{" "}
        {/* pass bannerurl and no padding for homepage */}
        <Route
          path="/articles"
          element={
            isAuthPage ? (
              <ArticlesPublic />
            ) : (
              <PublicLayout>
                <ArticlesPublic />
              </PublicLayout>
            )
          }
        />
        <Route
          path="/articles/:id"
          element={
            isAuthPage ? (
              <ArticleDetailPublic />
            ) : (
              <PublicLayout>
                <ArticleDetailPublic />
              </PublicLayout>
            )
          }
        />
        <Route
          path="/forms"
          element={
            isAuthPage ? (
              <FormsPublic />
            ) : (
              <PublicLayout>
                <FormsPublic />
              </PublicLayout>
            )
          }
        />
        <Route
          path="/forms/:id"
          element={
            isAuthPage ? (
              <FormDetailPublic />
            ) : (
              <PublicLayout>
                <FormDetailPublic />
              </PublicLayout>
            )
          }
        />
        <Route
          path="/contact"
          element={
            isAuthPage ? (
              <ContactPublic />
            ) : (
              <PublicLayout>
                <ContactPublic />
              </PublicLayout>
            )
          }
        />
        <Route
          path="/officials"
          element={
            isAuthPage ? (
              <OfficialsPublic />
            ) : (
              <PublicLayout>
                <OfficialsPublic />
              </PublicLayout>
            )
          }
        />
        {/* auth routes not wrapped in any layout */}
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        {/* shared routes accessible to both user and admin/employee if authenticated */}
        <Route
          path="/tickets/:id/messages"
          element={
            user ? (
              userType === "ADMIN" || userType === "EMPLOYEE" ? (
                <AdminLayout>
                  <TicketMessagesShared />
                </AdminLayout>
              ) : (
                <UserLayout>
                  <TicketMessagesShared />
                </UserLayout>
              )
            ) : (
              <PublicLayout>
                <TicketMessagesShared />
              </PublicLayout>
            )
          }
        />
        {/* admin/employee routes wrapped in adminlayout */}
        <Route
          path="/admin"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <HomeAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/pages"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <PagesAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/articles"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <ArticlesAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/forms"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <FormsAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/tickets"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <TicketsAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/users"
          element={
            userType === "ADMIN" || userType === "EMPLOYEE" ? (
              <AdminLayout>
                <UsersAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/admin/settings"
          element={
            userType === "ADMIN" ? (
              <AdminLayout>
                <SettingsAdmin />
              </AdminLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        {/* user routes */}
        <Route
          path="/user"
          element={
            user ? (
              <UserLayout>
                <HomeUser />
              </UserLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        <Route
          path="/user/tickets"
          element={
            user ? (
              <UserLayout>
                <TicketsUser />
              </UserLayout>
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />
        {/* user profile route */}
        <Route path="/profile" element={<UserProfile />} />
        {/* no match route */}
        <Route path="*" element={<div>Page not found</div>} />
      </Routes>
      {!isAuthPage && <ChatbotWidget />}{" "}
      {/* conditionally render chatbotwidget */}
    </>
  );
}

export default App;

================
File: src/components/Chatbot/ChatbotWidget.js
================
import React, { useState, useRef, useEffect } from "react";
import {
  Paper,
  Box,
  IconButton,
  TextField,
  Typography,
  Slide,
  Fab,
  Avatar,
  CircularProgress,
  useTheme,
  Stack,
  Alert,
  keyframes, // import keyframes
  styled, // import styled
} from "@mui/material";
import ChatIcon from "@mui/icons-material/Chat";
import CloseIcon from "@mui/icons-material/Close";
import SendIcon from "@mui/icons-material/Send";
import { useApi } from "../../hooks/useApi";
import { sendMessage } from "../../api/chat";

// define the pulse animation using keyframes and styled
const pulse = keyframes`
  0% {
    transform: scale(1);
    opacity: 0.9;
    box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
  }
  70% {
    transform: scale(1.05);
    opacity: 1;
    box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
  }
  100% {
    transform: scale(1);
    opacity: 0.9;
    box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
  }
`;

const GlowingFab = styled(Fab)`
  animation: ${pulse} 2s infinite;
`;

const ChatbotWidget = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const { execute: executeSendMessage, loading, error } = useApi(sendMessage);
  const messagesEndRef = useRef(null);
  const theme = useTheme();
  const [showNotification, setShowNotification] = useState(true);

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setShowNotification(false);
  };

  const handleSendMessage = async () => {
    if (input.trim() === "") return;

    const userMessage = { sender: "user", text: input };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInput("");

    const response = await executeSendMessage({ message: input });
    if (response) {
      const botMessage = { sender: "bot", text: response.response };
      setMessages((prevMessages) => [...prevMessages, botMessage]);
    }
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const getInitials = (sender) => {
    return sender.toUpperCase().charAt(0);
  };

  const formatTime = (timestamp) => {
    if (!timestamp) return "";
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  };

  return (
    <Box
      sx={{
        position: "fixed",
        bottom: 20,
        right: 20,
        zIndex: 1000,
        display: "flex",
        flexDirection: "row", // fab on the left, notification on right
        alignItems: "center",
      }}
    >
      {!isOpen && showNotification && (
        <Typography
          variant="caption"
          sx={{
            color: theme.palette.text.secondary,
            backgroundColor: theme.palette.grey[200],
            padding: "4px 8px",
            borderRadius: "8px",
            fontWeight: "bold",
            marginRight: "10px",
          }}
        >
          Need help? Chat with us!
        </Typography>
      )}

      {/* fab button to open chat (left side) */}
      {!isOpen && (
        <GlowingFab
          color="primary"
          aria-label="chat"
          onClick={toggleChat}
          sx={{ mr: 1 }}
        >
          {" "}
          {/* Added mr: 1 for gap, Using GlowingFab */}
          <ChatIcon />
        </GlowingFab>
      )}

      <Slide direction="up" in={isOpen} mountOnEnter unmountOnExit>
        <Paper
          elevation={4}
          sx={{
            width: 350,
            maxWidth: "90vw",
            display: "flex",
            flexDirection: "column",
            borderRadius: 2,
            overflow: "hidden",
          }}
        >
          {/* chat header */}
          <Box
            sx={{
              p: 2,
              backgroundColor: theme.palette.primary.main,
              color: "white",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <Typography variant="h6" component="div">
              Barangay Chatbot
            </Typography>
            <IconButton color="inherit" onClick={toggleChat}>
              <CloseIcon />
            </IconButton>
          </Box>

          {/* message area */}
          <Box
            sx={{
              p: 2,
              height: 300,
              overflowY: "auto",
              display: "flex",
              flexDirection: "column",
              bgcolor: theme.palette.grey[50],
            }}
          >
            <Stack spacing={2}>
              {messages.map((message, index) => (
                <Box
                  key={index}
                  sx={{
                    display: "flex",
                    justifyContent:
                      message.sender === "user" ? "flex-end" : "flex-start",
                    mb: 1,
                  }}
                >
                  <Box
                    sx={{
                      maxWidth: "80%",
                      display: "flex",
                      flexDirection: "column",
                      alignItems:
                        message.sender === "user" ? "flex-end" : "flex-start",
                    }}
                  >
                    <Paper
                      variant="outlined"
                      sx={{
                        p: 1,
                        borderRadius: "20px",
                        backgroundColor:
                          message.sender === "user"
                            ? theme.palette.primary.light
                            : "white",
                        color:
                          message.sender === "user" ? "white" : "text.primary",
                      }}
                    >
                      <Typography variant="body2">{message.text}</Typography>
                    </Paper>
                    <Typography
                      variant="caption"
                      sx={{
                        mt: 0.5,
                        color: theme.palette.text.secondary,
                        alignSelf: "flex-end",
                      }}
                    >
                      {formatTime(new Date())}
                    </Typography>
                  </Box>
                  {message.sender === "bot" && (
                    <Avatar
                      sx={{
                        bgcolor: theme.palette.secondary.main,
                        ml: 1,
                        order: -1,
                      }}
                    >
                      {getInitials("bot")}
                    </Avatar>
                  )}
                </Box>
              ))}
              <div ref={messagesEndRef} />
            </Stack>
            {error && (
              <Alert severity="error" sx={{ mt: 2 }}>
                Error: {error.message}
              </Alert>
            )}
            {loading && (
              <Box display="flex" justifyContent="center" mt={2}>
                <CircularProgress size={24} />
              </Box>
            )}
          </Box>

          {/* input area */}
          <Box
            sx={{
              p: 2,
              borderTop: `1px solid ${theme.palette.divider}`,
              display: "flex",
              alignItems: "center",
            }}
          >
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Type your message..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
              size="small"
              sx={{ mr: 1 }}
            />
            <IconButton
              color="primary"
              onClick={handleSendMessage}
              disabled={loading}
            >
              <SendIcon />
            </IconButton>
          </Box>
        </Paper>
      </Slide>
    </Box>
  );
};

export default ChatbotWidget;

================
File: src/components/Layouts/AdminLayout.js
================
import React from "react";
import AdminNav from "../Navigation/AdminNav";
import { Container } from "@mui/material";
import Footer from "./Footer";
import { Box } from "@mui/material";

const AdminLayout = ({ children = true }) => {
  return (
    <Box sx={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      <AdminNav />
      <Container
        sx={{
          flexGrow: 1,
        }}
      >
        {children}
      </Container>
      <Footer />
    </Box>
  );
};

export default AdminLayout;

================
File: src/components/Layouts/Footer.js
================
import React from "react";
import {
  Box,
  Container,
  Grid,
  Typography,
  Link,
  IconButton,
  Divider,
  useTheme,
  useMediaQuery,
} from "@mui/material";
import { Facebook, Twitter, Instagram } from "@mui/icons-material";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";

const Footer = () => {
  const currentYear = new Date().getFullYear();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <Box
      component="footer"
      sx={{
        backgroundColor: "primary.main",
        color: "primary.contrastText",
        py: 4, // Vertical padding
      }}
    >
      <Container>
        <Grid container spacing={2} justifyContent="center">
          {/* contact information */}
          <Grid item xs={12} sm={6} md={4}>
            <Typography variant="h6" gutterBottom>
              Contact Us
            </Typography>
            <Typography variant="body2">
              Brgy. San Antonio, Candon City,
            </Typography>
            <Typography variant="body2">Ilocos Sur, Philippines</Typography>
            <Typography variant="body2">Phone: +1 800 123 456 789</Typography>
            <Typography variant="body2">
              Email:{" "}
              <Link href="mailto:info@brgysanantonio.gov" color="inherit">
                info@brgysanantonio.gov
              </Link>
            </Typography>
          </Grid>

          {/* navigation links (optional) */}
          <Grid item xs={12} sm={6} md={4}>
            <Typography variant="h6" gutterBottom>
              Quick Links
            </Typography>
            <Box
              sx={{
                display: "flex",
                flexDirection: isMobile ? "row" : "column", // stack on mobile, row on larger screen
                flexWrap: "wrap",
                gap: isMobile ? 2 : 0, // add gap on mobile
                justifyContent: isMobile ? "space-around" : "flex-start",
              }}
            >
              <Link
                href="/"
                color="inherit"
                underline="hover"
                sx={{ mb: 1, display: "block" }}
              >
                Home
              </Link>
              <Link
                href="/articles"
                color="inherit"
                underline="hover"
                sx={{ mb: 1, display: "block" }}
              >
                News & Updates
              </Link>
              <Link
                href="/forms"
                color="inherit"
                underline="hover"
                sx={{ mb: 1, display: "block" }}
              >
                Forms
              </Link>
              <Link
                href="/contact"
                color="inherit"
                underline="hover"
                sx={{ mb: 1, display: "block" }}
              >
                Contact Us
              </Link>
            </Box>
          </Grid>

          {/* social media links (optional) */}
          <Grid item xs={12} sm={12} md={4}>
            <Typography variant="h6" gutterBottom>
              Follow Us
            </Typography>
            <Box>
              <IconButton
                href="https://www.facebook.com/handle"
                target="_blank"
                rel="noopener noreferrer"
                color="inherit"
                aria-label="Facebook"
              >
                <Facebook />
              </IconButton>
              <IconButton
                href="https://twitter.com/handle"
                target="_blank"
                rel="noopener noreferrer"
                color="inherit"
                aria-label="Twitter"
              >
                <Twitter />
              </IconButton>
              <IconButton
                href="https://www.instagram.com/handle"
                target="_blank"
                rel="noopener noreferrer"
                color="inherit"
                aria-label="Instagram"
              >
                <Instagram />
              </IconButton>
            </Box>
          </Grid>
        </Grid>

        <Divider sx={{ my: 3, borderColor: "rgba(255,255,255,0.2)" }} />

        {/* copyright information */}
        <Typography variant="body2" align="center">
          © {currentYear} Barangay San Antonio. All rights reserved.
        </Typography>
      </Container>
      <IconButton
        onClick={scrollToTop}
        sx={{
          position: "fixed",
          bottom: theme.spacing(2),
          right: theme.spacing(2),
          backgroundColor: "secondary.main",
          color: "secondary.contrastText",
          "&:hover": {
            backgroundColor: "secondary.dark",
          },
        }}
        aria-label="Back to Top"
      >
        <KeyboardArrowUpIcon />
      </IconButton>
    </Box>
  );
};

export default Footer;

================
File: src/components/Layouts/PublicLayout.js
================
import React from "react";
import PublicNav from "../Navigation/PublicNav";
import { Container } from "@mui/material";
import Footer from "./Footer";

const PublicLayout = ({ children = true }) => {
  return (
    <div>
      <PublicNav />
      <Container sx={{ flexGrow: 1 }}>
        {" "}
        {/* Add flexGrow: 1 */}
        {children}
      </Container>
      <Footer /> {/* render the footer */}
    </div>
  );
};

export default PublicLayout;

================
File: src/components/Layouts/UserLayout.js
================
import React from "react";
import UserNav from "../Navigation/UserNav";
import { Container } from "@mui/material";
import Footer from "./Footer";
import { Box } from "@mui/material";

const UserLayout = ({ children = true }) => {
  return (
    <Box sx={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      <UserNav />
      <Container
        sx={{
          flexGrow: 1, //  content to grow and push footer down
        }}
      >
        {children}
      </Container>
      <Footer />
    </Box>
  );
};

export default UserLayout;

================
File: src/components/Management/ManagementDetail.js
================
import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Typography,
  Divider,
  Box,
  Paper,
  Link, // Import Link component
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import parse from "html-react-parser";

// helper function to format date objects or firestore timestamps
const formatTimestamp = (value) => {
  // handle firestore timestamp objects (with _seconds and _nanoseconds)
  if (value && typeof value === "object" && "_seconds" in value) {
    // convert to javascript date
    return new Date(value._seconds * 1000).toLocaleString();
  }

  // handle date objects
  if (value instanceof Date) {
    return value.toLocaleString();
  }

  // return the value as is if it's already a string or other primitive
  return value;
};

const ManagementDetail = ({
  title,
  fields,
  open,
  item,
  onClose,
  onEditClick,
}) => {
  if (!item) return null;

  const renderFieldValue = (field, value) => {
    if (value === null || value === undefined) {
      return (
        <Typography variant="body2" color="text.secondary">
          Not provided
        </Typography>
      );
    }

    // handle timestamp objects
    if (typeof value === "object" && "_seconds" in value) {
      value = formatTimestamp(value);
    }

    switch (field.type) {
      case "richtext":
        return <Box sx={{ mt: 1 }}>{parse(String(value))}</Box>;

      case "select":
        const option = field.options?.find((opt) => opt.value === value);
        return (
          <Typography variant="body1">
            {option ? option.label : String(value)}
          </Typography>
        );

      case "date":
      case "datetime":
        return (
          <Typography variant="body1">{formatTimestamp(value)}</Typography>
        );

      case "uri": // Handle URI type for image URLs and links
        return (
          <Link href={value} target="_blank" rel="noopener noreferrer">
            <Typography variant="body1">{String(value)}</Typography>
          </Link>
        );

      default:
        return <Typography variant="body1">{String(value)}</Typography>;
    }
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      scroll="paper"
    >
      <DialogTitle>
        <Grid container alignItems="center" justifyContent="space-between">
          <Grid item>{title} Details</Grid>
          <Grid item>
            <Button
              startIcon={<EditIcon />}
              onClick={onEditClick}
              color="primary"
              variant="outlined"
              size="small"
            >
              Edit
            </Button>
          </Grid>
        </Grid>
      </DialogTitle>
      <DialogContent dividers>
        <Grid container spacing={3}>
          {fields.map((field) => (
            <Grid item xs={12} key={field.name}>
              <Paper variant="outlined" sx={{ p: 2 }}>
                <Typography
                  variant="subtitle2"
                  color="text.secondary"
                  gutterBottom
                >
                  {field.label}
                </Typography>
                <Divider sx={{ my: 1 }} />
                {renderFieldValue(field, item[field.name])}
              </Paper>
            </Grid>
          ))}
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Close
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ManagementDetail;

================
File: src/components/Management/ManagementForm.js
================
import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  FormHelperText,
  Grid,
  Box,
  CircularProgress,
} from "@mui/material";
import { EditorState, ContentState, convertToRaw } from "draft-js";
import { Editor } from "react-draft-wysiwyg";
import draftToHtml from "draftjs-to-html";
import htmlToDraft from "html-to-draftjs";
import "react-draft-wysiwyg/dist/react-draft-wysiwyg.css";

// safe conversion helper to handle various object types
const safeValue = (value) => {
  // return empty string for null/undefined
  if (value === null || value === undefined) {
    return "";
  }

  // handle firestore timestamp objects (with _seconds and _nanoseconds)
  if (typeof value === "object" && "_seconds" in value) {
    return new Date(value._seconds * 1000).toLocaleString();
  }

  // handle date objects
  if (value instanceof Date) {
    return value.toLocaleString();
  }

  // handle empty objects
  if (typeof value === "object" && Object.keys(value).length === 0) {
    return "";
  }

  // for other objects, convert to json string
  if (typeof value === "object") {
    try {
      return JSON.stringify(value);
    } catch (e) {
      return "";
    }
  }

  // otherwise return as is
  return value;
};

const ManagementForm = ({
  title,
  fields,
  open,
  mode,
  initialData,
  onSubmit,
  onClose,
}) => {
  const [formData, setFormData] = useState({});
  const [richTextEditors, setRichTextEditors] = useState({});
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (open) {
      // initialize form data with initial values or empty object
      const newFormData = initialData ? { ...initialData } : {};

      // clean up any object values that can't be directly rendered
      fields.forEach((field) => {
        if (newFormData[field.name] !== undefined) {
          // convert any object values to appropriate string representations
          if (typeof newFormData[field.name] === "object") {
            // special richtext field
            if (field.type !== "richtext") {
              newFormData[field.name] = safeValue(newFormData[field.name]);
            }
          }
        } else {
          // set default values for missing fields
          newFormData[field.name] = "";
        }
      });

      // initialize rich text editors if needed
      const newRichTextEditors = {};
      fields.forEach((field) => {
        if (field.type === "richtext") {
          let editorState;

          if (initialData && initialData[field.name]) {
            try {
              // handle the case where content might be an object
              const htmlContent =
                typeof initialData[field.name] === "object"
                  ? ""
                  : String(initialData[field.name]);

              const contentBlock = htmlToDraft(htmlContent);
              if (contentBlock) {
                const contentState = ContentState.createFromBlockArray(
                  contentBlock.contentBlocks
                );
                editorState = EditorState.createWithContent(contentState);
              } else {
                editorState = EditorState.createEmpty();
              }
            } catch (e) {
              console.error("Error initializing rich text editor:", e);
              editorState = EditorState.createEmpty();
            }
          } else {
            editorState = EditorState.createEmpty();
          }

          newRichTextEditors[field.name] = editorState;
        }
      });

      setFormData(newFormData);
      setRichTextEditors(newRichTextEditors);
      setErrors({});
    }
  }, [open, initialData, fields]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
    // clear error for this field if any
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: null,
      });
    }
  };

  const handleRichTextChange = (name, editorState) => {
    setRichTextEditors({
      ...richTextEditors,
      [name]: editorState,
    });

    // convert editor content to html and store in formdata
    const contentState = editorState.getCurrentContent();
    const html = draftToHtml(convertToRaw(contentState));

    setFormData({
      ...formData,
      [name]: html,
    });

    // clear error for this field if any
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: null,
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    let isValid = true;

    fields.forEach((field) => {
      // simple required validation
      if (
        field.required &&
        (!formData[field.name] || formData[field.name] === "")
      ) {
        newErrors[field.name] = `${field.label} is required`;
        isValid = false;
      }
    });

    setErrors(newErrors);
    return isValid;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    // create a clean copy of form data without any problematic objects
    const cleanedFormData = { ...formData };

    // make sure all data is in a format that won't cause rendering issues
    Object.keys(cleanedFormData).forEach((key) => {
      if (
        typeof cleanedFormData[key] === "object" &&
        !(cleanedFormData[key] instanceof Date)
      ) {
        //for rich text fields we want to keep the html string
        const field = fields.find((f) => f.name === key);
        if (field && field.type === "richtext") {
          //already html string
        } else {
          // convert other objects to string representation
          cleanedFormData[key] = safeValue(cleanedFormData[key]);
        }
      }
    });

    setLoading(true);
    try {
      const success = await onSubmit(cleanedFormData);
      if (success) {
        onClose();
      }
    } catch (err) {
      console.error("Error submitting form:", err);
      setErrors({
        ...errors,
        _general: "Failed to submit form. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  };

  const renderField = (field) => {
    const { name, label, type, options = [] } = field;
    //  value is never an object that could cause rendering issues
    const value =
      typeof formData[name] === "object"
        ? safeValue(formData[name])
        : formData[name] || "";
    const error = errors[name] || null;

    switch (type) {
      case "text":
      case "uri": // treat as text
        return (
          <TextField
            fullWidth
            label={label}
            name={name}
            value={value}
            onChange={handleInputChange}
            error={!!error}
            helperText={error}
            margin="normal"
            variant="outlined"
          />
        );

      case "textarea":
        return (
          <TextField
            fullWidth
            label={label}
            name={name}
            value={value}
            onChange={handleInputChange}
            error={!!error}
            helperText={error}
            margin="normal"
            variant="outlined"
            multiline
            rows={4}
          />
        );

      case "select":
        return (
          <FormControl
            fullWidth
            margin="normal"
            error={!!error}
            variant="outlined"
          >
            <InputLabel id={`${name}-label`}>{label}</InputLabel>
            <Select
              labelId={`${name}-label`}
              name={name}
              value={value || ""}
              onChange={handleInputChange}
              label={label}
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {options.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
            {error && <FormHelperText>{error}</FormHelperText>}
          </FormControl>
        );

      case "richtext":
        return (
          <Box sx={{ mt: 2, mb: 2 }}>
            <InputLabel sx={{ mb: 1 }}>{label}</InputLabel>
            <Box
              sx={{
                border: error
                  ? "1px solid #d32f2f"
                  : "1px solid rgba(0, 0, 0, 0.23)",
                borderRadius: 1,
                minHeight: 200,
                overflow: "hidden",
              }}
            >
              <Editor
                editorState={richTextEditors[name]}
                onEditorStateChange={(editorState) =>
                  handleRichTextChange(name, editorState)
                }
                wrapperClassName="rich-text-wrapper"
                editorClassName="rich-text-editor"
                toolbar={{
                  options: [
                    "inline",
                    "blockType",
                    "fontSize",
                    "list",
                    "textAlign",
                    "link",
                    "history",
                  ],
                }}
              />
            </Box>
            {error && <FormHelperText error>{error}</FormHelperText>}
          </Box>
        );

      default:
        return (
          <TextField
            fullWidth
            label={label}
            name={name}
            value={value}
            onChange={handleInputChange}
            error={!!error}
            helperText={error}
            margin="normal"
            variant="outlined"
          />
        );
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === "create" ? `Create ${title}` : `Edit ${title}`}
      </DialogTitle>
      <DialogContent dividers>
        <Grid container spacing={2}>
          {fields.map((field) => (
            <Grid item xs={12} key={field.name}>
              {renderField(field)}
            </Grid>
          ))}
          {errors._general && (
            <Grid item xs={12}>
              <Box sx={{ color: "error.main", mt: 2 }}>{errors._general}</Box>
            </Grid>
          )}
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="inherit" disabled={loading}>
          Cancel
        </Button>
        <Button
          onClick={handleSubmit}
          color="primary"
          variant="contained"
          disabled={loading}
          startIcon={loading ? <CircularProgress size={20} /> : null}
        >
          {loading ? "Saving..." : mode === "create" ? "Create" : "Update"}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ManagementForm;

================
File: src/components/Management/ManagementList.js
================
import React, { useState } from "react";
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  IconButton,
  Tooltip,
  CircularProgress,
  Box,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";

// helper function to format date objects or firestore timestamps
const formatTimestamp = (value) => {
  // handle firestore timestamp objects (with _seconds and _nanoseconds)
  if (value && typeof value === "object" && "_seconds" in value) {
    // convert to javascript date
    return new Date(value._seconds * 1000).toLocaleString();
  }

  // handle date objects
  if (value instanceof Date) {
    return value.toLocaleString();
  }

  // return the value as is if it's already a string or other primitive
  return value;
};

// helper function to safely get a property value
const safeGetValue = (obj, path, defaultValue = "") => {
  if (!obj) return defaultValue;

  // handle direct property access
  if (typeof path === "string" && path in obj) {
    return obj[path];
  }

  return defaultValue;
};

const ManagementList = ({
  columns,
  items,
  loading,
  onEditClick,
  onDetailClick,
  onDeleteClick,
}) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", my: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  // make sure items is always an array and filter out undefined/null rows
  const safeItems = Array.isArray(items)
    ? items.filter((item) => item !== null && item !== undefined)
    : [];
  const visibleRows = safeItems.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage,
  );

  // generate a unique key for each row
  const getRowKey = (row, index) => {
    // use the row's id if available, otherwise use the index
    return row && row.id ? row.id : `row-${index}`;
  };

  const handleActionClick = (handler, rowId) => {
    if (!handler) return;
    handler(rowId);
  };

  return (
    <Paper sx={{ width: "100%", overflow: "hidden" }}>
      <TableContainer sx={{ maxHeight: 440 }}>
        <Table stickyHeader aria-label="sticky table">
          <TableHead>
            <TableRow>
              {columns.map((column) => (
                <TableCell
                  key={column.field}
                  align={column.numeric ? "right" : "left"}
                  style={{ minWidth: column.minWidth }}
                >
                  {column.headerName}
                </TableCell>
              ))}
              <TableCell align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {visibleRows.map((row, rowIndex) => (
              <TableRow
                hover
                role="checkbox"
                tabIndex={-1}
                key={getRowKey(row, rowIndex)}
              >
                {columns.map((column) => {
                  // safely get the value from the row, handling undefined properties
                  const value = safeGetValue(row, column.field);

                  const displayValue = column.renderCell
                    ? column.renderCell({ row })
                    : // format timestamp objects or return the value directly
                      column.field.toLowerCase().includes("date") ||
                        column.field.toLowerCase().includes("at") ||
                        column.field.toLowerCase().includes("time")
                      ? formatTimestamp(value)
                      : value !== null && value !== undefined
                        ? String(value)
                        : "";

                  return (
                    <TableCell
                      key={column.field}
                      align={column.numeric ? "right" : "left"}
                    >
                      {displayValue}
                    </TableCell>
                  );
                })}
                <TableCell align="right">
                  {onDetailClick && (
                    <Tooltip title="View details">
                      <IconButton
                        onClick={() =>
                          handleActionClick(onDetailClick, row?.id)
                        }
                        size="small"
                      >
                        <VisibilityIcon />
                      </IconButton>
                    </Tooltip>
                  )}
                  {onEditClick && (
                    <Tooltip title="Edit">
                      <IconButton
                        onClick={() => handleActionClick(onEditClick, row?.id)}
                        size="small"
                      >
                        <EditIcon />
                      </IconButton>
                    </Tooltip>
                  )}
                  {onDeleteClick && (
                    <Tooltip title="Delete">
                      <IconButton
                        onClick={() =>
                          handleActionClick(onDeleteClick, row?.id)
                        }
                        size="small"
                        color="error"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  )}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25, 100]}
        component="div"
        count={safeItems.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
};

export default ManagementList;

================
File: src/components/Management/ManagementPage.js
================
import React, { useState, useEffect } from "react";
import { Container, Typography, Box, Button, Paper } from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import ManagementList from "./ManagementList";
import ManagementForm from "./ManagementForm";
import ManagementDetail from "./ManagementDetail";

// helper function to safely process api data
const sanitizeData = (data) => {
  if (!data) return data;

  // if it's an array, process each item
  if (Array.isArray(data)) {
    return data.map((item) => sanitizeData(item));
  }

  // if it's an object, process each property
  if (typeof data === "object") {
    const result = { ...data };

    // process each property
    Object.keys(result).forEach((key) => {
      const value = result[key];

      // handle firestore timestamps
      if (value && typeof value === "object") {
        if ("_seconds" in value && "_nanoseconds" in value) {
          // convert to date
          result[key] = new Date(value._seconds * 1000);
        } else if (Object.keys(value).length === 0) {
          // handle empty objects
          result[key] = "";
        } else {
          // recursively sanitize nested objects
          result[key] = sanitizeData(value);
        }
      }
    });

    return result;
  }

  // return primitives as is
  return data;
};

const ManagementPage = ({
  title,
  columns,
  fields,
  fetchItems,
  getItem,
  createItem,
  updateItem,
  deleteItem,
}) => {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [formMode, setFormMode] = useState("create"); // 'create' or 'edit'

  // fetch all items when component mounts
  useEffect(() => {
    const loadItems = async () => {
      try {
        setLoading(true);
        const data = await fetchItems();
        // sanitize the response data to handle timestamp objects
        const sanitizedData = sanitizeData(data);
        setItems(sanitizedData);
        setError(null);
      } catch (err) {
        setError(`Failed to load ${title.toLowerCase()}s: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };

    loadItems();
  }, [fetchItems, title]);

  const handleCreateClick = () => {
    setSelectedItem(null);
    setFormMode("create");
    setIsFormOpen(true);
  };

  const handleEditClick = async (id) => {
    try {
      const item = await getItem(id);
      // sanitize the item data
      const sanitizedItem = sanitizeData(item);
      setSelectedItem(sanitizedItem);
      setFormMode("edit");
      setIsFormOpen(true);
    } catch (err) {
      setError(`Failed to get ${title.toLowerCase()} details: ${err.message}`);
    }
  };

  const handleDetailClick = async (id) => {
    try {
      const item = await getItem(id);
      // sanitize the item data
      const sanitizedItem = sanitizeData(item);
      setSelectedItem(sanitizedItem);
      setIsDetailOpen(true);
    } catch (err) {
      setError(`Failed to get ${title.toLowerCase()} details: ${err.message}`);
    }
  };

  const handleDeleteClick = async (id) => {
    if (
      window.confirm(
        `Are you sure you want to delete this ${title.toLowerCase()}?`,
      )
    ) {
      try {
        await deleteItem(id);
        setItems(items.filter((item) => item.id !== id));
      } catch (err) {
        setError(`Failed to delete ${title.toLowerCase()}: ${err.message}`);
      }
    }
  };

  const handleFormSubmit = async (formData) => {
    try {
      let result;

      if (formMode === "create") {
        result = await createItem(formData);
        // sanitize the returned data
        const sanitizedResult = sanitizeData(result);
        setItems([...items, sanitizedResult]);
      } else {
        result = await updateItem(selectedItem.id, formData);
        // sanitize the returned data
        const sanitizedResult = sanitizeData(result);
        setItems(
          items.map((item) =>
            item.id === sanitizedResult.id ? sanitizedResult : item,
          ),
        );
      }
      setIsFormOpen(false);
      return true;
    } catch (err) {
      setError(`Failed to ${formMode} ${title.toLowerCase()}: ${err.message}`);
      return false; // return false to prevent form from closing
    }
  };

  const handleFormClose = () => {
    setIsFormOpen(false);
  };

  const handleDetailClose = () => {
    setIsDetailOpen(false);
  };

  return (
    <Container maxWidth="xl">
      <Box sx={{ my: 4 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
          }}
        >
          <Typography variant="h4" component="h1">
            {title} Management
          </Typography>
          {createItem && (
            <Button
              variant="contained"
              color="primary"
              startIcon={<AddIcon />}
              onClick={handleCreateClick}
            >
              Create {title}
            </Button>
          )}
        </Box>

        {error && (
          <Paper
            sx={{
              p: 2,
              mb: 2,
              bgcolor: "error.light",
              color: "error.contrastText",
            }}
          >
            <Typography>{error}</Typography>
          </Paper>
        )}

        <ManagementList
          columns={columns}
          items={items}
          loading={loading}
          onEditClick={handleEditClick}
          onDetailClick={handleDetailClick}
          onDeleteClick={handleDeleteClick}
        />

        <ManagementForm
          title={title}
          fields={fields}
          open={isFormOpen}
          mode={formMode}
          initialData={selectedItem}
          onSubmit={handleFormSubmit}
          onClose={handleFormClose}
        />

        <ManagementDetail
          title={title}
          fields={fields}
          open={isDetailOpen}
          item={selectedItem}
          onClose={handleDetailClose}
          onEditClick={() => {
            setIsDetailOpen(false);
            setFormMode("edit");
            setIsFormOpen(true);
          }}
        />
      </Box>
    </Container>
  );
};

export default ManagementPage;

================
File: src/components/Navigation/AdminNav.js
================
import React from "react";
import NavBar from "./NavBar";
import NavButton from "./NavButton";
import { useAuth } from "../../hooks/useAuth";
import DescriptionIcon from "@mui/icons-material/Description"; // for pages
import ArticleIcon from "@mui/icons-material/Article"; // for articles
import DynamicFormIcon from "@mui/icons-material/DynamicForm"; // for forms
import ConfirmationNumberIcon from "@mui/icons-material/ConfirmationNumber"; // for tickets
import PeopleIcon from "@mui/icons-material/People"; // for users
import SettingsIcon from "@mui/icons-material/Settings"; // for settings

const AdminNav = () => {
  const { userType } = useAuth();

  return (
    <NavBar>
      <NavButton to="/admin/pages" icon={<DescriptionIcon />}>
        PAGES
      </NavButton>
      <NavButton to="/admin/articles" icon={<ArticleIcon />}>
        ARTICLES
      </NavButton>
      <NavButton to="/admin/forms" icon={<DynamicFormIcon />}>
        FORMS
      </NavButton>
      <NavButton to="/admin/tickets" icon={<ConfirmationNumberIcon />}>
        TICKETS
      </NavButton>
      <NavButton to="/admin/users" icon={<PeopleIcon />}>
        USERS
      </NavButton>
      {userType === "ADMIN" && (
        <NavButton to="/admin/settings" icon={<SettingsIcon />}>
          SETTINGS
        </NavButton>
      )}
    </NavBar>
  );
};

export default AdminNav;

================
File: src/components/Navigation/AnnouncementBar.js
================
import React, { useState } from "react";
import { Box, Typography, IconButton, Collapse, useTheme } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";
import { keyframes } from "@emotion/react";

const AnnouncementBar = ({ announcementMessage }) => {
  const [open, setOpen] = useState(true);
  const theme = useTheme();

  if (!announcementMessage) {
    return null; // Don't render anything if there's no message
  }

  const handleClose = () => {
    setOpen(false);
  };

  // Define keyframes animations only for the background
  const pulse = keyframes`
    0% { transform: scale(1); }
    50% { transform: scale(1.03); }
    100% { transform: scale(1); }
  `;

  const slideIn = keyframes`
    0% { transform: translateY(-100%); }
    100% { transform: translateY(0); }
  `;

  // Ping-pong gradient animation
  const shimmerPingPong = keyframes`
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  `;

  return (
    <Collapse in={open} timeout={800}>
      <Box
        sx={{
          background: `linear-gradient(90deg, 
            ${theme.palette.warning.main} 0%, 
            ${theme.palette.warning.light} 33%, 
            ${theme.palette.warning.main} 66%, 
            ${theme.palette.warning.dark} 100%)`,
          backgroundSize: "300% 100%",
          animation: `${slideIn} 0.7s ease-out, ${shimmerPingPong} 8s infinite ease-in-out`,
          animationDelay: "0s, 0s",
          color: theme.palette.warning.contrastText,
          padding: "10px 16px",
          textAlign: "center",
          width: "100%",
          boxSizing: "border-box",
          boxShadow: "0 3px 10px rgba(0,0,0,0.15)",
          position: "relative",
          overflow: "hidden",
          transition: "box-shadow 0.3s ease",
          "&:hover": {
            boxShadow: "0 4px 12px rgba(0,0,0,0.2)",
          },
        }}
      >
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            maxWidth: "calc(100% - 40px)",
            margin: "0 auto",
            position: "relative",
          }}
        >
          <InfoOutlinedIcon fontSize="small" sx={{ marginRight: 1 }} />
          <Typography
            variant="body2"
            sx={{
              fontWeight: 600,
              textShadow: "0 0 1px rgba(0,0,0,0.1)",
            }}
          >
            {announcementMessage}
          </Typography>
        </Box>

        <IconButton
          size="small"
          onClick={handleClose}
          aria-label="close"
          sx={{
            position: "absolute",
            right: 8,
            top: "50%",
            transform: "translateY(-50%)",
            color: theme.palette.warning.contrastText,
            backgroundColor: "rgba(0,0,0,0.05)",
            "&:hover": {
              backgroundColor: "rgba(0,0,0,0.15)",
            },
            transition: "background-color 0.2s ease",
          }}
        >
          <CloseIcon fontSize="small" />
        </IconButton>
      </Box>
    </Collapse>
  );
};

export default AnnouncementBar;

================
File: src/components/Navigation/NavBar.js
================
import React, { useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import {
  AppBar,
  Toolbar,
  Box,
  IconButton,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  useMediaQuery,
  useTheme,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import UserDisplay from "./UserDisplay";
import TopBar from "./TopBar";

const NavBar = ({ children, contactButton }) => {
  // accept contactbutton prop
  const [mobileOpen, setMobileOpen] = useState(false);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const drawer = (
    <Box onClick={handleDrawerToggle} sx={{ textAlign: "center" }}>
      <List>
        {React.Children.map(children, (child) => (
          <ListItem key={child.props.to} disablePadding>
            <ListItemButton component={RouterLink} to={child.props.to}>
              <ListItemText primary={child.props.children} />
            </ListItemButton>
          </ListItem>
        ))}
        <ListItem key="contact-us-mobile" disablePadding>
          {" "}
          {/* add contact us to mobile menu */}
          <ListItemButton component={RouterLink} to="/contact">
            <ListItemText primary="Contact Us" />
          </ListItemButton>
        </ListItem>
      </List>
    </Box>
  );

  return (
    <>
      <TopBar />
      <AppBar
        position="sticky"
        sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}
      >
        {" "}
        {/*CRUCIAL: Sticky positioning and z-index*/}
        <Toolbar sx={{ paddingY: "0px" }}>
          {/* logo and navigation links (left side) */}
          <Box
            sx={{ display: "flex", alignItems: "center", gap: 1, flexGrow: 1 }}
          >
            <RouterLink to="/">
              <img
                src="https://i.ibb.co/Ps6D83RM/logo.png"
                alt="Brgy. San Antonio Logo"
                style={{
                  height: "80px",
                  marginRight: "10px",
                  position: "relative",
                  zIndex: 1, // make sure logo is also above the banner
                  filter: "drop-shadow(0px 4px 8px rgba(0, 0, 0, 0.2))",
                  marginTop: "5px",
                  marginBottom: "-20px",
                }}
              />
            </RouterLink>

            {/* conditionally render nav links or hamburger */}
            {isMobile ? null : (
              <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                {children}
              </Box>
            )}
          </Box>

          {/* user display, contact us button, and hamburger (right side) */}
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            {contactButton} {/* render contact us button here */}
            <UserDisplay />
            {isMobile && (
              <IconButton
                color="inherit"
                aria-label="open drawer"
                edge="end"
                onClick={handleDrawerToggle}
                sx={{ ml: 2 }}
              >
                <MenuIcon />
              </IconButton>
            )}
          </Box>
        </Toolbar>
      </AppBar>

      {/* mobile drawer */}
      <nav>
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: "block", md: "none" },
            "& .MuiDrawer-paper": { boxSizing: "border-box", width: 240 },
          }}
        >
          {drawer}
        </Drawer>
      </nav>
    </>
  );
};

export default NavBar;

================
File: src/components/Navigation/NavButton.js
================
import React from "react";
import { Button } from "@mui/material";
import { Link as RouterLink, useLocation } from "react-router-dom";

const NavButton = ({ to, children, icon, ...props }) => {
  const location = useLocation();
  const isActive = location.pathname === to;

  return (
    <Button
      color="inherit"
      component={RouterLink}
      to={to}
      sx={{
        fontWeight: 500,
        display: "flex",
        gap: 0,
        backgroundColor: isActive ? "rgba(255, 255, 255, 0.2)" : "transparent", // semi-transparent background
        borderRadius: "8px", // rounded corners
        paddingX: 1.5,
        paddingY: 0.5,
        "&:hover": {
          backgroundColor: "rgba(255, 255, 255, 0.3)", // slightly more opaque on hover
        },
        // removed borderbottom styles
      }}
      {...props}
      startIcon={icon}
    >
      {children}
    </Button>
  );
};

export default NavButton;

================
File: src/components/Navigation/PublicNav.js
================
import React from "react";
import NavBar from "./NavBar";
import NavButton from "./NavButton";
import { useAuth } from "../../hooks/useAuth";
import { Button, Box, Typography } from "@mui/material";
import CallIcon from "@mui/icons-material/Call";
import { Link as RouterLink } from "react-router-dom";
import ArticleIcon from "@mui/icons-material/Article"; // for news & Updates
import DynamicFormIcon from "@mui/icons-material/DynamicForm"; // for make a request
import SupervisorAccountIcon from "@mui/icons-material/SupervisorAccount"; // for officials
import ConfirmationNumberIcon from "@mui/icons-material/ConfirmationNumber"; // for submit a ticket

const PublicNav = () => {
  const { user, userType } = useAuth();

  const submitTicketLink = user
    ? userType === "RESIDENT"
      ? "/user/tickets"
      : "/admin/tickets"
    : "/login";

  return (
    <NavBar contactButton={<NavBarContactButton />}>
      <NavButton to="/articles" icon={<ArticleIcon />}>
        NEWS & UPDATES
      </NavButton>
      <NavButton to="/forms" icon={<DynamicFormIcon />}>
        MAKE A REQUEST
      </NavButton>
      <NavButton to="/officials" icon={<SupervisorAccountIcon />}>
        OFFICIALS
      </NavButton>
      <NavButton to={submitTicketLink} icon={<ConfirmationNumberIcon />}>
        SUBMIT A TICKET
      </NavButton>
    </NavBar>
  );
};

const NavBarContactButton = () => {
  //No change needed
  return (
    <Box ml="auto">
      <Button
        variant="contained"
        color="primary"
        component={RouterLink}
        to="/contact"
        sx={{
          borderRadius: "24px",
          backgroundColor: "white",
          color: "primary.main",
          "&:hover": {
            backgroundColor: "grey.200",
          },
          textTransform: "none",
          padding: "6px 16px",
        }}
      >
        <CallIcon sx={{ mr: 1 }} />
        <Typography variant="body1" sx={{ fontWeight: 200 }}>
          Contact Us
        </Typography>
      </Button>
    </Box>
  );
};

export default PublicNav;

================
File: src/components/Navigation/TopBar.js
================
import React, { useState, useEffect } from "react";
import { Box, Typography, Link } from "@mui/material"; // import link
import { useAuth } from "../../hooks/useAuth";
import { formatDate, formatDateTime } from "../../utils/dateUtils";

const TopBar = () => {
  const { user, userType } = useAuth();
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  return (
    <Box
      sx={{
        backgroundColor: "#f0f0f0",
        color: "#333",
        padding: "5px 10px",
        fontSize: "0.8rem",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
      }}
    >
      <Box>
        <Typography variant="body2">
          <Link
            href="https://www.gov.ph/"
            target="_blank"
            rel="noopener noreferrer"
            color="#000000"
            fontWeight="500"
            sx={{ textDecoration: "none" }}
          >
            GOV.PH
          </Link>
            |   THE UNOFFICIAL* WEBSITE OF BRGY. SAN ANTONIO, CANDON CITY,
          ILOCOS SUR
        </Typography>
      </Box>
      <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
        <Typography variant="body2">
          Open Hours: Mon - Fri: 8:00 am - 6:00 pm
        </Typography>
        <Typography variant="body2">+1 800 123 456 789</Typography>
        <Typography variant="body2">
          {formatDateTime(currentTime)} 🇵🇭
        </Typography>
      </Box>
    </Box>
  );
};

export default TopBar;

================
File: src/components/Navigation/UserDisplay.js
================
import React, { useState } from "react";
import {
  IconButton,
  Menu,
  MenuItem,
  Typography,
  Box,
  Avatar,
  Divider,
  ListItemIcon,
  ListItemText,
  useTheme,
  alpha,
  Tooltip,
  Paper,
} from "@mui/material";
import AccountCircle from "@mui/icons-material/AccountCircle";
import DashboardIcon from "@mui/icons-material/Dashboard";
import SettingsIcon from "@mui/icons-material/Settings";
import LogoutIcon from "@mui/icons-material/Logout";
import PersonIcon from "@mui/icons-material/Person";
import LoginIcon from "@mui/icons-material/Login";
import { useAuth } from "../../hooks/useAuth";
import { Link as RouterLink, useNavigate } from "react-router-dom";

const UserDisplay = () => {
  const { user, userType, logout } = useAuth();
  const [anchorEl, setAnchorEl] = useState(null);
  const navigate = useNavigate();
  const theme = useTheme();

  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleLogout = async () => {
    try {
      await logout();
      handleMenuClose();
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  const handleDashboardClick = () => {
    if (userType === "ADMIN" || userType === "EMPLOYEE") {
      navigate("/admin");
    } else if (userType === "RESIDENT") {
      navigate("/user");
    }
    handleMenuClose();
  };

  const getInitials = (name) => {
    if (!name) return "U";
    return name
      .split(" ")
      .map((part) => part[0])
      .join("")
      .toUpperCase()
      .substring(0, 2);
  };

  // generate a consistent color based on user name or email
  const generateAvatarColor = (name) => {
    if (!name) return theme.palette.primary.main;

    const colors = [
      theme.palette.primary.main,
      theme.palette.secondary.main,
      theme.palette.error.main,
      theme.palette.success.main,
      theme.palette.info.main,
      theme.palette.warning.main,
    ];

    // simple hash function to get a consistent color
    const hash = name
      .split("")
      .reduce((acc, char) => acc + char.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  const avatarColor = user
    ? generateAvatarColor(user.displayName || user.email)
    : theme.palette.primary.main;

  const userTypeLabel = () => {
    if (!userType) return "";

    const labels = {
      ADMIN: "Admin",
      EMPLOYEE: "Employee",
      RESIDENT: "Resident",
    };

    return labels[userType] || userType;
  };

  return (
    <Box sx={{ display: "flex", alignItems: "center", gap: 0 }}>
      {user && (
        <Box
          sx={{
            display: { xs: "none", sm: "flex" },
            flexDirection: "column",
            alignItems: "flex-end",
            mr: 1.5,
          }}
        >
          <Typography
            variant="body2"
            sx={{
              lineHeight: 1.2,
              mb: 0.25,
              color: "white",
            }}
          >
            Welcome,{" "}
            <span style={{ fontWeight: 600 }}>
              {user.displayName || user.email.split("@")[0]}
            </span>
          </Typography>
          <Typography
            variant="caption"
            sx={{
              color: "white",
              fontSize: "0.6rem",
              letterSpacing: 0.3,
              textTransform: "uppercase",
            }}
          >
            {userTypeLabel()}
          </Typography>
        </Box>
      )}

      <Tooltip title={user ? "Account menu" : "Login"}>
        <IconButton
          size="medium"
          edge="end"
          aria-label="account of current user"
          aria-controls="menu-appbar"
          aria-haspopup="true"
          onClick={handleMenuOpen}
          sx={{
            transition: "transform 0.2s",
            "&:hover": {
              transform: "scale(1.05)",
              backgroundColor: alpha(theme.palette.primary.main, 0.08),
            },
          }}
        >
          {user ? (
            <Avatar
              sx={{
                bgcolor: avatarColor,
                width: 38,
                height: 38,
                boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
                fontWeight: 600,
                fontSize: "0.85rem",
              }}
            >
              {getInitials(user.displayName || user.email)}
            </Avatar>
          ) : (
            <Avatar
              sx={{
                bgcolor: theme.palette.grey[200],
                color: theme.palette.primary.main,
              }}
            >
              <AccountCircle />
            </Avatar>
          )}
        </IconButton>
      </Tooltip>

      <Menu
        id="menu-appbar"
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: "bottom",
          horizontal: "right",
        }}
        keepMounted
        transformOrigin={{
          vertical: "top",
          horizontal: "right",
        }}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          elevation: 3,
          sx: {
            mt: 1.5,
            minWidth: 220,
            borderRadius: 2,
            overflow: "visible",
            filter: "drop-shadow(0px 2px 8px rgba(0,0,0,0.15))",
            "&:before": {
              content: '""',
              display: "block",
              position: "absolute",
              top: 0,
              right: 14,
              width: 10,
              height: 10,
              bgcolor: "background.paper",
              transform: "translateY(-50%) rotate(45deg)",
              zIndex: 0,
            },
          },
        }}
      >
        {user ? (
          <>
            <Box
              sx={{
                px: 2.5,
                py: 2,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
              }}
            >
              <Avatar
                sx={{
                  width: 56,
                  height: 56,
                  mb: 1.5,
                  bgcolor: avatarColor,
                  fontWeight: 600,
                }}
              >
                {getInitials(user.displayName || user.email)}
              </Avatar>
              <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 0.5 }}>
                {user.displayName || user.email.split("@")[0]}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {user.email}
              </Typography>
            </Box>

            <Divider />

            <MenuItem onClick={handleDashboardClick} sx={{ py: 1.5, px: 2 }}>
              <ListItemIcon>
                <DashboardIcon fontSize="small" color="primary" />
              </ListItemIcon>
              <ListItemText primary="My Dashboard" />
            </MenuItem>

            {userType === "ADMIN" && (
              <MenuItem
                component={RouterLink}
                to="/admin/settings"
                onClick={handleMenuClose}
                sx={{ py: 1.5, px: 2 }}
              >
                <ListItemIcon>
                  <SettingsIcon fontSize="small" color="action" />
                </ListItemIcon>
                <ListItemText primary="Settings" />
              </MenuItem>
            )}

            <Divider />

            <MenuItem onClick={handleLogout} sx={{ py: 1.5, px: 2 }}>
              <ListItemIcon>
                <LogoutIcon fontSize="small" color="error" />
              </ListItemIcon>
              <ListItemText
                primary="Logout"
                primaryTypographyProps={{ color: "error" }}
              />
            </MenuItem>
          </>
        ) : (
          <MenuItem
            component={RouterLink}
            to="/login"
            onClick={handleMenuClose}
            sx={{ py: 1.5, px: 2 }}
          >
            <ListItemIcon>
              <LoginIcon fontSize="small" color="primary" />
            </ListItemIcon>
            <ListItemText primary="Login" />
          </MenuItem>
        )}
      </Menu>
    </Box>
  );
};

export default UserDisplay;

================
File: src/components/Navigation/UserNav.js
================
import React from "react";
import NavBar from "./NavBar";
import NavButton from "./NavButton";
import ConfirmationNumberIcon from "@mui/icons-material/ConfirmationNumber"; // for my tickets

const UserNav = () => {
  return (
    <NavBar>
      <NavButton to="/user/tickets" icon={<ConfirmationNumberIcon />}>
        My Tickets
      </NavButton>
    </NavBar>
  );
};

export default UserNav;

================
File: src/components/UI/Banner.js
================
import React from "react";
import { Box, Typography, useTheme } from "@mui/material";

const Banner = ({ imageUrl, title }) => {
  return (
    <Box
      sx={{
        backgroundImage: `url(${imageUrl})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        width: "100vw",
        height: "300px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "relative",
        overflow: "hidden",
        marginLeft: "calc(-50vw + 50%)",
        "&::before": {
          content: '""',
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          backgroundColor: "rgba(0, 0, 0, 0.6)",
          backdropFilter: "blur(3px)",
          background:
            "linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent)",
        },
      }}
    >
      {title && (
        <Typography
          variant="h2"
          sx={{
            color: "white",
            zIndex: 1,
            textShadow: "2px 2px 6px rgba(0, 0, 0, 0.8)",
            fontWeight: 600,
          }}
        >
          {title}
        </Typography>
      )}
    </Box>
  );
};

export default Banner;

================
File: src/components/UI/ConfirmDialog.js
================
import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button,
  CircularProgress,
} from "@mui/material";

const ConfirmDialog = ({
  open,
  onClose,
  onConfirm,
  title,
  message,
  loading,
}) => {
  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>{title}</DialogTitle>
      <DialogContent>
        <DialogContentText>{message}</DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary" disabled={loading}>
          Cancel
        </Button>
        <Button
          onClick={onConfirm}
          color="primary"
          autoFocus
          disabled={loading}
        >
          {loading ? <CircularProgress size={24} /> : "Confirm"}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ConfirmDialog;

================
File: src/components/UI/ErrorMessage.js
================
import React from "react";
import { Alert } from "@mui/material";

const ErrorMessage = ({ message }) => {
  return <Alert severity="error">{message}</Alert>;
};

export default ErrorMessage;

================
File: src/components/UI/LoadingSpinner.js
================
import React from "react";
import { CircularProgress, Box } from "@mui/material";

const LoadingSpinner = () => {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      minHeight="200px"
    >
      <CircularProgress />
    </Box>
  );
};

export default LoadingSpinner;

================
File: src/contexts/AuthContext.js
================
import React, { createContext, useState, useEffect } from "react";
import { auth } from "../api/firebase";
import { signInWithEmailAndPassword } from "firebase/auth";
import { me as fetchMe, register } from "../api/auth";
import { useNavigate } from "react-router-dom";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [userType, setUserType] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (firebaseUser) => {
      if (!firebaseUser) {
        setUser(null);
        setUserType("GUEST");
        setLoading(false);
      } else {
        try {
          const userData = await fetchMe();
          setUser(firebaseUser);
          setUserType(userData.type);
        } catch (error) {
          console.error("Error fetching user data:", error);
          setUser(firebaseUser);
        } finally {
          setLoading(false);
        }
      }
    });

    return unsubscribe;
  }, []);

  const signup = (userData) => {
    return register(userData);
  };

  const login = (email, password) => {
    return signInWithEmailAndPassword(auth, email, password);
  };

  const logout = async () => {
    try {
      await auth.signOut();
      navigate("/login"); // redirect to login after logout
    } catch (error) {
      console.error("Logout error:", error);
      throw error;
    }
  };

  const value = {
    user,
    userType,
    signup,
    login,
    logout,
    loading,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading ? children : null}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = React.useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

================
File: src/hooks/useApi.js
================
import { useState, useCallback } from "react";

export const useApi = (apiFunc, ...initialArgs) => {
  // accepts initial arguments
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const execute = useCallback(
    async (...args) => {
      // accepts arguments for the api call
      setLoading(true);
      setError(null);
      try {
        // use initialargs if no arguments are provided, otherwise use the provided args
        const actualArgs = args.length > 0 ? args : initialArgs;
        const result = await apiFunc(...actualArgs);
        setData(result);
        return result; // return the result for the caller to use
      } catch (err) {
        setError(err);
        return null;
      } finally {
        setLoading(false);
      }
    },
    [apiFunc, initialArgs]
  );

  return { data, loading, error, execute };
};

================
File: src/hooks/useAuth.js
================
import { useAuth } from "../contexts/AuthContext";

// this is just a re-export of the context hook
export { useAuth };

================
File: src/index.js
================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import { ThemeProvider } from "@mui/material/styles";
import theme from "./theme";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <ThemeProvider theme={theme}>
          <App />
        </ThemeProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>,
);

================
File: src/pages/Admin/Articles.js
================
import React from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import {
  getArticles,
  getArticle,
  createArticle,
  updateArticle,
  deleteArticle,
} from "../../api/articles";

const AdminArticles = () => {
  const columns = [
    { field: "title", headerName: "Title" },
    { field: "slug", headerName: "Slug" },
    { field: "createdAt", headerName: "Created At" },
  ];

  const fields = [
    { name: "title", label: "Title", type: "text" },
    { name: "slug", label: "Slug", type: "text" },
    { name: "content", label: "Content", type: "richtext" },
    { name: "imageURL", label: "Image URL", type: "uri" },
  ];

  return (
    <ManagementPage
      title="Article"
      columns={columns}
      fields={fields}
      fetchItems={getArticles}
      getItem={getArticle}
      createItem={createArticle}
      updateItem={updateArticle}
      deleteItem={deleteArticle}
    />
  );
};

export default AdminArticles;

================
File: src/pages/Admin/Forms.js
================
import React from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import {
  getForms,
  getForm,
  createForm,
  updateForm,
  deleteForm,
} from "../../api/forms";

const AdminForms = () => {
  const columns = [
    { field: "title", headerName: "Title" },
    { field: "link", headerName: "Link" },
  ];

  const fields = [
    { name: "title", label: "Title", type: "text" },
    { name: "description", label: "Description", type: "textarea" },
    { name: "link", label: "Link", type: "uri" },
    { name: "imageURL", label: "Image URL", type: "uri" },
  ];

  return (
    <ManagementPage
      title="Form"
      columns={columns}
      fields={fields}
      fetchItems={getForms}
      getItem={getForm}
      createItem={createForm}
      updateItem={updateForm}
      deleteItem={deleteForm}
    />
  );
};

export default AdminForms;

================
File: src/pages/Admin/Home.js
================
import React from "react";
import { Typography, Container } from "@mui/material";

const AdminHome = () => {
  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Admin Dashboard
      </Typography>
      <Typography variant="body1">
        Welcome to the admin dashboard. You can manage content and users here.
      </Typography>
    </Container>
  );
};

export default AdminHome;

================
File: src/pages/Admin/Pages.js
================
import React from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import {
  getPages,
  getPage,
  createPage,
  updatePage,
  deletePage,
} from "../../api/pages";

const AdminPages = () => {
  const columns = [
    { field: "title", headerName: "Title" },
    { field: "slug", headerName: "Slug" },
    { field: "createdAt", headerName: "Created At" },
  ];

  const fields = [
    { name: "title", label: "Title", type: "text" },
    { name: "slug", label: "Slug", type: "text" },
    { name: "content", label: "Content", type: "richtext" },
    { name: "imageURL", label: "Image URL", type: "uri" },
  ];

  return (
    <ManagementPage
      title="Page"
      columns={columns}
      fields={fields}
      fetchItems={getPages}
      getItem={getPage}
      createItem={createPage}
      updateItem={updatePage}
      deleteItem={deletePage}
    />
  );
};

export default AdminPages;

================
File: src/pages/Admin/Settings.js
================
import React, { useState, useEffect } from "react";
import {
  TextField,
  Button,
  Container,
  Typography,
  Box,
  Alert,
} from "@mui/material";
import { getSettings, updateSettings } from "../../api/settings";

const AdminSettings = () => {
  const [settings, setSettings] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false); // success state

  useEffect(() => {
    const fetchSettings = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await getSettings();
        setSettings(data || {});
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchSettings();
  }, []);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setSettings((prevSettings) => ({ ...prevSettings, [name]: value }));
    setSuccess(false);
    setError(null);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);
    try {
      await updateSettings(settings);
      setSuccess(true); //set success to true
    } catch (err) {
      setError(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="sm">
        <Box mt={4}>
          <Typography variant="h4" gutterBottom>
            Settings
          </Typography>
          <Typography>Loading settings...</Typography>
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom>
        Settings
      </Typography>
      <Box component="form" onSubmit={handleSubmit}>
        <TextField
          fullWidth
          margin="normal"
          label="Google Gemini Key"
          name="googleGeminiKey"
          value={settings.googleGeminiKey || ""}
          onChange={handleChange}
        />
        <TextField
          fullWidth
          margin="normal"
          label="Facebook Page ID"
          name="facebookPageId"
          value={settings.facebookPageId || ""}
          onChange={handleChange}
        />
        <TextField
          fullWidth
          margin="normal"
          label="Facebook Access Token"
          name="facebookAccessToken"
          value={settings.facebookAccessToken || ""}
          onChange={handleChange}
        />
        <TextField
          fullWidth
          margin="normal"
          label="Announcement Text"
          name="announcementText"
          value={settings.announcementText || ""}
          onChange={handleChange}
          multiline
          rows={4}
        />
        {error && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {error.message}
          </Alert>
        )}
        {success && (
          <Alert severity="success" sx={{ mt: 2 }}>
            Settings updated successfully!
          </Alert>
        )}
        <Button
          type="submit"
          variant="contained"
          color="primary"
          disabled={loading}
        >
          Save Settings
        </Button>
      </Box>
    </Container>
  );
};

export default AdminSettings;

================
File: src/pages/Admin/Tickets.js
================
import React, { useEffect, useState } from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import {
  getTickets,
  getTicket,
  createTicket,
  updateTicket,
  deleteTicket,
} from "../../api/tickets";
import { getUsersByType } from "../../api/users";
import { Link } from "react-router-dom";

const AdminTickets = () => {
  const [adminUsers, setAdminUsers] = useState([]);

  useEffect(() => {
    const fetchAdminUsers = async () => {
      const employees = await getUsersByType("EMPLOYEE");
      const admins = await getUsersByType("ADMIN");
      const combinedUsers = [...employees, ...admins];
      const uniqueUsers = Array.from(
        new Map(combinedUsers.map((user) => [user.id, user])).values(),
      );

      setAdminUsers(uniqueUsers);
    };

    fetchAdminUsers();
  }, []);

  const columns = [
    { field: "title", headerName: "Title" },
    { field: "status", headerName: "Status" },
    {
      field: "assignedToName",
      headerName: "Assigned To",
      valueGetter: (params) => {
        const assignedUser = adminUsers.find(
          (user) => user.id === params.row.assignedTo,
        );
        return assignedUser
          ? `${assignedUser.firstName} ${assignedUser.lastName}`
          : "Unassigned";
      },
    },
    {
      field: "messagesLink",
      headerName: "Messages",
      renderCell: (params) => (
        <Link to={`/tickets/${params.row.id}/messages`}>View Messages</Link>
      ),
    },
  ];

  const fields = [
    { name: "title", label: "Title", type: "text" },
    {
      name: "status",
      label: "Status",
      type: "select",
      options: [
        { value: "OPEN", label: "Open" },
        { value: "IN_PROGRESS", label: "In Progress" },
        { value: "CLOSED", label: "Closed" },
      ],
    },
    {
      name: "assignedTo",
      label: "Assigned To",
      type: "select",
      options: adminUsers.map((user) => ({
        value: user.id,
        label: `${user.firstName} ${user.lastName}`,
      })),
    },
  ];

  return (
    <ManagementPage
      title="Ticket"
      columns={columns}
      fields={fields}
      fetchItems={getTickets}
      getItem={getTicket}
      createItem={createTicket}
      updateItem={updateTicket}
      deleteItem={deleteTicket}
    />
  );
};

export default AdminTickets;

================
File: src/pages/Admin/Users.js
================
import React from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import { getUsers, getUser, updateUser, deleteUser } from "../../api/users"; // no createuser

const AdminUsers = () => {
  const columns = [
    { field: "firstName", headerName: "First Name" },
    { field: "lastName", headerName: "Last Name" },
    { field: "email", headerName: "Email" },
    { field: "type", headerName: "Type" },
    { field: "role", headerName: "Role" },
  ];

  const fields = [
    { name: "firstName", label: "First Name", type: "text" },
    { name: "lastName", label: "Last Name", type: "text" },
    { name: "email", label: "Email", type: "text" },
    { name: "phone", label: "Phone", type: "text" },
    { name: "address", label: "Address", type: "textarea" },
    {
      name: "type",
      label: "Type",
      type: "select",
      options: [
        { value: "RESIDENT", label: "Resident" },
        { value: "EMPLOYEE", label: "Employee" },
        { value: "ADMIN", label: "Admin" },
      ],
    },
    {
      name: "role",
      label: "Role",
      type: "select",
      options: [
        { value: "", label: "None" },
        { value: "CAPTAIN", label: "Captain" },
        { value: "SECRETARY", label: "Secretary" },
        { value: "TREASURER", label: "Treasurer" },
        { value: "COUNCILOR", label: "Councilor" },
        { value: "SK_CHAIRPERSON", label: "SK Chairperson" },
        { value: "SK_MEMBER", label: "SK Member" },
      ],
    },
    { name: "bio", label: "Bio", type: "textarea" },
  ];

  return (
    <ManagementPage
      title="User"
      columns={columns}
      fields={fields}
      fetchItems={getUsers}
      getItem={getUser}
      createItem={() => {}} // no create user functionality
      updateItem={updateUser}
      deleteItem={deleteUser}
    />
  );
};

export default AdminUsers;

================
File: src/pages/Auth/Login.js
================
import React, { useState, useEffect } from "react";
import {
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  Link,
  Paper,
  Grid,
  useTheme,
  useMediaQuery,
  CircularProgress,
} from "@mui/material";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate, Link as RouterLink } from "react-router-dom";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const { login, userType } = useAuth();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));

  useEffect(() => {
    if (userType === "RESIDENT") {
      navigate("/user");
    } else if (userType === "ADMIN" || userType === "EMPLOYEE") {
      navigate("/admin");
    }
  }, [userType, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);
    try {
      await login(email, password);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      sx={{
        height: "100vh",
        width: "100vw",
        overflow: "hidden",
        display: "flex",
        background: "linear-gradient(135deg, #3f51b5 0%, #9c27b0 100%)",
      }}
    >
      <Grid container>
        <Grid
          item
          xs={12}
          md={6}
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            p: 4,
            color: "white",
            height: "100vh",
          }}
        >
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <img
              src="https://i.ibb.co/Ps6D83RM/logo.png"
              alt="Brgy. San Antonio Logo"
              style={{
                height: isMobile ? "100px" : "150px",
                marginBottom: "20px",
              }}
            />
            <Typography
              variant={isMobile ? "h4" : "h3"}
              fontWeight="bold"
              sx={{
                textShadow: "1px 1px 3px rgba(0,0,0,0.3)",
              }}
            >
              Barangay San Antonio
            </Typography>
            <Typography
              variant={isMobile ? "h6" : "h5"}
              sx={{
                mt: 2,
                textAlign: "center",
                textShadow: "1px 1px 2px rgba(0,0,0,0.2)",
              }}
            >
              Building a stronger community together
            </Typography>
          </Box>
        </Grid>

        {/* login form section - exactly 50% of screen */}
        <Grid
          item
          xs={12}
          md={6}
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            p: 3,
            height: "100vh",
          }}
        >
          <Paper
            elevation={10}
            sx={{
              p: 4,
              width: "100%",
              maxWidth: "450px",
              borderRadius: 2,
              backgroundColor: "white", // solid white background, no transparency
            }}
          >
            <Typography
              variant="h4"
              align="center"
              mb={3}
              fontWeight="medium"
              color="primary"
            >
              Welcome Back
            </Typography>

            {error && (
              <Alert severity="error" sx={{ mb: 3 }}>
                {error}
              </Alert>
            )}

            <form onSubmit={handleSubmit}>
              <TextField
                label="Email"
                variant="outlined"
                fullWidth
                margin="normal"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />
              <TextField
                label="Password"
                variant="outlined"
                fullWidth
                margin="normal"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                size="large"
                sx={{
                  mt: 3,
                  mb: 2,
                  borderRadius: 1.5,
                  py: 1.5,
                }}
                disabled={loading} //disable
              >
                {loading ? (
                  <CircularProgress size={24} color="inherit" />
                ) : (
                  "Sign In"
                )}{" "}
                {/* show spinner if loading */}
              </Button>
            </form>

            <Box mt={3} textAlign="center">
              <Typography variant="body1">
                Don't have an account?{" "}
                <Link
                  component={RouterLink}
                  to="/signup"
                  sx={{
                    fontWeight: "medium",
                    "&:hover": {
                      textDecoration: "none",
                    },
                  }}
                >
                  Sign Up
                </Link>
              </Typography>
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default Login;

================
File: src/pages/Auth/Signup.js
================
import React, { useState } from "react";
import {
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  Link,
  Paper,
  Grid,
  useTheme,
  useMediaQuery,
  CircularProgress,
} from "@mui/material";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate, Link as RouterLink } from "react-router-dom";

const Signup = () => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const { signup } = useAuth();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);
    try {
      await signup({
        firstName,
        lastName,
        email,
        password,
        address,
        phone,
      });
      navigate("/login");
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      sx={{
        height: "100vh",
        width: "100vw",
        overflow: "hidden",
        display: "flex",
        background: "linear-gradient(135deg, #3f51b5 0%, #9c27b0 100%)",
      }}
    >
      <Grid container>
        {/* logo and branding section - exactly 50% of screen */}
        <Grid
          item
          xs={12}
          md={6}
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            p: 4,
            color: "white",
            height: "100vh",
          }}
        >
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <img
              src="https://i.ibb.co/Ps6D83RM/logo.png"
              alt="Brgy. San Antonio Logo"
              style={{
                height: isMobile ? "100px" : "150px",
                marginBottom: "20px",
              }}
            />
            <Typography
              variant={isMobile ? "h4" : "h3"}
              fontWeight="bold"
              sx={{
                textShadow: "1px 1px 3px rgba(0,0,0,0.3)",
              }}
            >
              Barangay San Antonio
            </Typography>
            <Typography
              variant={isMobile ? "h6" : "h5"}
              sx={{
                mt: 2,
                textAlign: "center",
                textShadow: "1px 1px 2px rgba(0,0,0,0.2)",
              }}
            >
              Building a stronger community together
            </Typography>
          </Box>
        </Grid>

        {/* signup form section - exactly 50% of screen */}
        <Grid
          item
          xs={12}
          md={6}
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            p: 3,
            height: "100vh",
          }}
        >
          <Paper
            elevation={10}
            sx={{
              p: 4,
              width: "100%",
              maxWidth: "500px",
              borderRadius: 2,
              backgroundColor: "white", // solid white background, no transparency
            }}
          >
            <Typography
              variant="h4"
              align="center"
              mb={3}
              fontWeight="medium"
              color="primary"
            >
              Create Account
            </Typography>

            {error && (
              <Alert severity="error" sx={{ mb: 3 }}>
                {error}
              </Alert>
            )}

            <form onSubmit={handleSubmit}>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="First Name"
                    variant="outlined"
                    fullWidth
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    required
                    InputProps={{
                      sx: { borderRadius: 1.5 },
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="Last Name"
                    variant="outlined"
                    fullWidth
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    required
                    InputProps={{
                      sx: { borderRadius: 1.5 },
                    }}
                  />
                </Grid>
              </Grid>

              <TextField
                label="Email"
                variant="outlined"
                fullWidth
                margin="normal"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />

              <TextField
                label="Password"
                variant="outlined"
                fullWidth
                margin="normal"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />

              <TextField
                label="Address"
                variant="outlined"
                fullWidth
                margin="normal"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />

              <TextField
                label="Phone Number"
                variant="outlined"
                fullWidth
                margin="normal"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                InputProps={{
                  sx: { borderRadius: 1.5 },
                }}
              />

              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                size="large"
                sx={{
                  mt: 3,
                  mb: 2,
                  borderRadius: 1.5,
                  py: 1.5,
                }}
                disabled={loading} // disable button while loading
              >
                {loading ? (
                  <CircularProgress size={24} color="inherit" />
                ) : (
                  "Sign Up"
                )}{" "}
                {/* show spinner if loading */}
              </Button>
            </form>

            <Box mt={3} textAlign="center">
              <Typography variant="body1">
                Already have an account?{" "}
                <Link
                  component={RouterLink}
                  to="/login"
                  sx={{
                    fontWeight: "medium",
                    "&:hover": {
                      textDecoration: "none",
                    },
                  }}
                >
                  Login
                </Link>
              </Typography>
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default Signup;

================
File: src/pages/Auth/UserProfile.js
================
import React from "react";
import {
  Container,
  Typography,
  Box,
  Paper,
  Grid,
  Avatar,
  Button,
  Divider,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import { useAuth } from "../../hooks/useAuth";

const UserProfile = () => {
  const { user, userType } = useAuth();

  if (!user) {
    return <Typography>Loading profile...</Typography>;
  }

  const getInitials = (name) => {
    if (!name) return "U";
    return name
      .split(" ")
      .map((part) => part[0])
      .join("")
      .toUpperCase()
      .substring(0, 2);
  };

  return (
    <Container maxWidth="md">
      <Box mt={4}>
        <Paper elevation={3} sx={{ p: 3 }}>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={4} md={3} sx={{ textAlign: "center" }}>
              {/* Display user's profile picture if available */}
              {user.photoURL ? (
                <Avatar
                  src={user.photoURL}
                  sx={{
                    width: 120,
                    height: 120,
                    mb: 2,
                    mx: "auto",
                  }}
                />
              ) : (
                <Avatar
                  sx={{
                    width: 120,
                    height: 120,
                    bgcolor: "primary.main",
                    fontSize: 48,
                    mb: 2,
                    mx: "auto",
                  }}
                >
                  {getInitials(user.displayName || user.email)}
                </Avatar>
              )}
              <Button
                variant="outlined"
                startIcon={<EditIcon />}
                sx={{ mt: 1 }}
              >
                Edit Profile
              </Button>
            </Grid>
            <Grid item xs={12} sm={8} md={9}>
              <Typography variant="h4" gutterBottom>
                {user.displayName || "User Profile"}
              </Typography>
              <Divider sx={{ mb: 2 }} />

              <Grid container spacing={1}>
                <Grid item xs={12} sm={4}>
                  <Typography variant="subtitle1" color="textSecondary">
                    Email:
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={8}>
                  <Typography variant="body1">{user.email}</Typography>
                </Grid>

                <Grid item xs={12} sm={4}>
                  <Typography variant="subtitle1" color="textSecondary">
                    User Type:
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={8}>
                  <Typography variant="body1">{userType}</Typography>
                </Grid>

                <Grid item xs={12} sm={4}>
                  <Typography variant="subtitle1" color="textSecondary">
                    Address:
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={8}>
                  <Typography variant="body1">
                    {user.address || "N/A"}
                  </Typography>
                </Grid>

                <Grid item xs={12} sm={4}>
                  <Typography variant="subtitle1" color="textSecondary">
                    Phone:
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={8}>
                  <Typography variant="body1">{user.phone || "N/A"}</Typography>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </Paper>
      </Box>
    </Container>
  );
};

export default UserProfile;

================
File: src/pages/Public/ArticleDetail.js
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getArticle } from '../../api/articles';
import parse from 'html-react-parser';
import { Container, Typography, Box, Paper, CircularProgress } from '@mui/material';

const ArticleDetailPublic = () => {
  const { id } = useParams();
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchArticle = async () => {
      try {
        const data = await getArticle(id);
        setArticle(data);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchArticle();
  }, [id]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return <Typography>Error: {error.message}</Typography>;
  }

  if (!article) {
    return <Typography>Article not found.</Typography>;
  }

    const formatDate = (timestamp) => {
        if (!timestamp) return '';
        // handle firestore timestamp
        if (typeof timestamp === 'object' && timestamp._seconds) {
            return new Date(timestamp._seconds * 1000).toLocaleDateString();
        }
       const date = new Date(timestamp);
        return date.toLocaleDateString();
    }

  return (
    <Container maxWidth="md">
      <Box mt={4} mb={4}>
        <Paper elevation={3} sx={{ p: 3 }}>
          <Typography variant="h3" component="h1" gutterBottom>
            {article.title}
          </Typography>
          {article.imageURL && ( // Conditionally render the image
            <Box sx={{ mt: 2, mb: 3 }}>
              <img src={article.imageURL} alt={article.title} style={{ width: '100%', maxWidth: '800px', height: 'auto' }} />
            </Box>
          )}
            <Typography variant="subtitle1" color="textSecondary" gutterBottom>
              Published on {formatDate(article.createdAt)}
          </Typography>
          <Box sx={{ mt: 2 }}>{parse(article.content)}</Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default ArticleDetailPublic;

================
File: src/pages/Public/Articles.js
================
import React, { useEffect, useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import { getArticles } from "../../api/articles";
import Banner from "../../components/UI/Banner"; // import banner component
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardActionArea,
  CardContent,
  CardMedia,
  CircularProgress,
  TextField,
  InputAdornment,
  Fade,
  Paper, // no longer used for search/sort paper
  Button,
  Pagination,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Skeleton,
  useTheme,
  useMediaQuery,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import SortIcon from "@mui/icons-material/Sort";
import { ArrowForward, Event } from "@mui/icons-material";

const ArticlesPublic = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [articles, setArticles] = useState([]);
  const [filteredArticles, setFilteredArticles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState("newest");
  const [page, setPage] = useState(1);
  const [fadeIn, setFadeIn] = useState(true);
  const articlesPerPage = 9;

  useEffect(() => {
    const fetchArticles = async () => {
      try {
        const data = await getArticles();
        setArticles(data);
        setFilteredArticles(data);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchArticles();
  }, []);

  useEffect(() => {
    setFadeIn(false);
    const timer = setTimeout(() => {
      let results = [...articles];

      if (searchTerm) {
        results = results.filter((article) =>
          article.title.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }

      results.sort((a, b) => {
        const dateA = a.createdAt?._seconds
          ? new Date(a.createdAt._seconds * 1000)
          : new Date(a.createdAt);
        const dateB = b.createdAt?._seconds
          ? new Date(b.createdAt._seconds * 1000)
          : new Date(b.createdAt);

        return sortOrder === "newest" ? dateB - dateA : dateA - dateB;
      });

      setFilteredArticles(results);
      setPage(1);
      setFadeIn(true);
    }, 300);

    return () => clearTimeout(timer);
  }, [articles, searchTerm, sortOrder]);

  const formatDate = (timestamp) => {
    if (!timestamp) return "";
    if (typeof timestamp === "object" && timestamp._seconds) {
      return new Date(timestamp._seconds * 1000).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    }

    const date = new Date(timestamp);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const handleChangePage = (event, newPage) => {
    setFadeIn(false);
    setTimeout(() => {
      setPage(newPage);
      setFadeIn(true);
      window.scrollTo({ top: 0, behavior: "smooth" });
    }, 300);
  };

  const paginatedArticles = filteredArticles.slice(
    (page - 1) * articlesPerPage,
    page * articlesPerPage
  );

  const pageCount = Math.ceil(filteredArticles.length / articlesPerPage);

  if (loading) {
    return (
      <Container maxWidth="lg">
        <Box mt={4} mb={4}>
          <Skeleton variant="text" height={60} width="40%" />
          <Skeleton variant="rectangular" height={60} sx={{ my: 3 }} />

          <Grid container spacing={3} sx={{ mt: 2 }}>
            {[1, 2, 3, 4, 5, 6].map((item) => (
              <Grid item xs={12} sm={6} md={4} key={item}>
                <Card sx={{ height: "100%" }}>
                  <Skeleton variant="rectangular" height={140} />
                  <CardContent>
                    <Skeleton variant="text" height={30} width="80%" />
                    <Skeleton variant="text" height={20} width="40%" />
                    <Skeleton variant="text" height={60} />
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg">
        <Box mt={4} mb={4} textAlign="center">
          <Typography variant="h5" color="error" gutterBottom>
            Error Loading Articles
          </Typography>
          <Typography>{error.message}</Typography>
          <Button
            variant="contained"
            onClick={() => window.location.reload()}
            sx={{ mt: 2 }}
          >
            Try Again
          </Button>
        </Box>
      </Container>
    );
  }

  const bannerURL =
    "https://i.ibb.co/BVxPjCrZ/475172880-122193205580173185-8945588955944178897-n.jpg";

  return (
    <Box sx={{ backgroundColor: "#f5f7fa", py: 0, minHeight: "100vh" }}>
      {" "}
      {/* reduced py to 0 */}
      <Banner imageUrl={bannerURL} title="News & Updates" />{" "}
      {/* banner component */}
      <Container maxWidth="lg" sx={{ mt: 2 }}>
        {" "}
        {/* adjusted mt to 2 to give space below banner */}
        {/* search and sort section - no paper, compact design */}
        <Grid container spacing={2} alignItems="center" sx={{ mb: 2 }}>
          {" "}
          {/* reduced mb */}
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              placeholder="Search articles..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              variant="outlined"
              size="small" // compact size
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
                sx: { borderRadius: "50px", height: "40px" }, // adjusted height and borderradius
              }}
              sx={{
                "& .MuiOutlinedInput-root": {
                  borderRadius: "50px", // ensure consistent borderradius
                },
              }}
            />
          </Grid>
          <Grid item xs={12} sm={4} md={2}>
            <FormControl fullWidth size="small" sx={{ height: "40px" }}>
              {" "}
              {/* compact size and height */}
              <InputLabel id="sort-select-label" sx={{ lineHeight: "40px" }}>
                {" "}
                {/* align label vertically */}
                <Box sx={{ display: "flex", alignItems: "center" }}>
                  <SortIcon fontSize="small" sx={{ mr: 0.5 }} />
                  Sort
                </Box>
              </InputLabel>
              <Select
                labelId="sort-select-label"
                value={sortOrder}
                label="Sort"
                onChange={(e) => setSortOrder(e.target.value)}
                sx={{ height: "40px" }} // adjusted height
              >
                <MenuItem value="newest">Newest First</MenuItem>
                <MenuItem value="oldest">Oldest First</MenuItem>
              </Select>
            </FormControl>
          </Grid>
        </Grid>
        {/* filter results summary - kept for information */}
        <Box
          sx={{
            mb: 3,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Typography variant="body2" color="textSecondary">
            {" "}
            {/* reduced variant and toned down color */}
            {filteredArticles.length === 0
              ? "No articles found"
              : `Showing ${filteredArticles.length} articles`}
          </Typography>
        </Box>
        {/* articles grid */}
        <Fade in={fadeIn} timeout={500}>
          <Box>
            {filteredArticles.length === 0 ? (
              <Paper sx={{ p: 3, textAlign: "center", borderRadius: "12px" }}>
                {" "}
                {/* reduced padding */}
                <Typography variant="subtitle1" gutterBottom>
                  No articles found
                </Typography>{" "}
                {/* reduced variant */}
                <Typography variant="body2" color="text.secondary">
                  Try adjusting your search criteria
                </Typography>
              </Paper>
            ) : (
              <Grid container spacing={3}>
                {paginatedArticles.map((article) => (
                  <Grid item xs={12} sm={6} md={4} key={article.id}>
                    <Card
                      sx={{
                        height: "100%",
                        display: "flex",
                        flexDirection: "column",
                        transition: "all 0.3s ease",
                        "&:hover": {
                          transform: "translateY(-4px)", // reduced hover effect
                          boxShadow: "0 8px 15px rgba(0,0,0,0.08)", // reduced shadow
                        },
                        borderRadius: "8px", // slightly less rounded cards
                        overflow: "hidden",
                      }}
                    >
                      <CardActionArea
                        component={RouterLink}
                        to={`/articles/${article.id}`}
                        sx={{
                          flexGrow: 1,
                          display: "flex",
                          flexDirection: "column",
                          alignItems: "stretch",
                        }}
                      >
                        {article.imageURL ? (
                          <CardMedia
                            component="img"
                            height="160" // reduced height
                            image={article.imageURL}
                            alt={article.title}
                            sx={{
                              transition: "all 0.3s ease",
                              "&:hover": {
                                transform: "scale(1.02)", // reduced scale on hover
                              },
                            }}
                          />
                        ) : (
                          <CardMedia
                            component="img"
                            height="160" // reduced height
                            image={`https://source.unsplash.com/random/400x200/?news`}
                            alt={article.title}
                            sx={{
                              transition: "all 0.3s ease",
                              "&:hover": {
                                transform: "scale(1.02)", // reduced scale on hover
                              },
                            }}
                          />
                        )}
                        <CardContent
                          sx={{
                            flexGrow: 1,
                            display: "flex",
                            flexDirection: "column",
                            padding: 2,
                          }}
                        >
                          {" "}
                          {/* reduced padding in card content */}
                          <Typography
                            gutterBottom
                            variant="h6"
                            component="div"
                            sx={{
                              fontWeight: 500, // slightly lighter fontweight
                              height: "3em", // reduced height for title
                              overflow: "hidden",
                              textOverflow: "ellipsis",
                              display: "-webkit-box",
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: "vertical",
                              fontSize: "1.1rem", // adjusted font size
                            }}
                          >
                            {article.title}
                          </Typography>
                          <Typography
                            variant="body2"
                            color="text.secondary"
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 1,
                              fontSize: "0.85rem",
                            }} // smaller font size for date
                          >
                            <Event sx={{ fontSize: "0.85rem", mr: 0.5 }} />{" "}
                            {/* smaller icon size */}
                            {formatDate(article.createdAt)}
                          </Typography>
                          {article.summary && (
                            <Typography
                              variant="body2"
                              color="text.secondary"
                              sx={{
                                mb: 1, // reduced margin
                                height: "3.5em", // reduced height for summary
                                overflow: "hidden",
                                textOverflow: "ellipsis",
                                display: "-webkit-box",
                                WebkitLineClamp: 2,
                                WebkitBoxOrient: "vertical",
                                fontSize: "0.9rem", // adjusted font size
                              }}
                            >
                              {article.summary}
                            </Typography>
                          )}
                          <Typography
                            variant="body2"
                            color="primary"
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mt: "auto",
                              fontWeight: 500,
                              fontSize: "0.9rem", // adjusted font size
                            }}
                          >
                            Read More{" "}
                            <ArrowForward
                              sx={{ fontSize: "0.9rem", ml: 0.5 }}
                            />{" "}
                            {/* smaller icon size */}
                          </Typography>
                        </CardContent>
                      </CardActionArea>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            )}
          </Box>
        </Fade>
        {/* pagination */}
        {pageCount > 1 && (
          <Box sx={{ display: "flex", justifyContent: "center", mt: 3 }}>
            {" "}
            {/* reduced mt */}
            <Pagination
              count={pageCount}
              page={page}
              onChange={handleChangePage}
              color="primary"
              size={isMobile ? "small" : "medium"}
              showFirstButton
              showLastButton
              sx={{
                "& .MuiPaginationItem-root": {
                  "&.Mui-selected": {
                    fontWeight: "bold",
                  },
                },
              }}
            />
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default ArticlesPublic;

================
File: src/pages/Public/Contact.js
================
import React from 'react';
import PageDetail from './PageDetail'; // import pagedetail

const Contact = () => {
  return <PageDetail pageSlug="contact" />; // use pagedetail with the correct slug
};

export default Contact;

================
File: src/pages/Public/FormDetail.js
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getForm } from '../../api/forms';
import { Container, Typography, Box, Paper, Link, CircularProgress, Card, CardMedia, CardContent } from '@mui/material';

const FormDetailPublic = () => {
    const { id } = useParams();
    const [form, setForm] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchForm = async () => {
            try {
                const data = await getForm(id);
                setForm(data);
            } catch (err) {
                setError(err);
            } finally {
                setLoading(false);
            }
        };
        fetchForm();
    }, [id]);

    if (loading) {
       return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
                <CircularProgress />
            </Box>
        );
    }

    if (error) {
        return <Typography>Error: {error.message}</Typography>;
    }

    if (!form) {
        return <Typography>Form not found.</Typography>;
    }

    return (
        <Container maxWidth="md">
            <Box mt={4} mb={4}>
                 <Card>
                    {form.imageURL && (  // Conditionally render the image
                        <CardMedia
                            component="img"
                            height="140"
                            image={form.imageURL}
                            alt={form.title}
                        />
                    )}
                    <CardContent>
                      <Typography gutterBottom variant="h5" component="div">
                        {form.title}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {form.description}
                      </Typography>
                       <Box mt={2}>
                        <Link href={form.link} target="_blank" rel="noopener noreferrer">
                            Go to Form
                        </Link>
                      </Box>
                    </CardContent>
                </Card>
            </Box>
        </Container>
    );
};

export default FormDetailPublic;

================
File: src/pages/Public/Forms.js
================
import React, { useEffect, useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import { getForms } from "../../api/forms";
import Banner from "../../components/UI/Banner";
import {
  Container,
  Typography,
  Box,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Paper,
  TextField,
  InputAdornment,
  CircularProgress,
  Skeleton,
  Button,
  Pagination,
  useTheme,
  useMediaQuery,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import DescriptionIcon from "@mui/icons-material/Description";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";

const FormsPublic = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [forms, setForms] = useState([]);
  const [filteredForms, setFilteredForms] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const formsPerPage = 10;

  useEffect(() => {
    const fetchFormsData = async () => {
      try {
        const data = await getForms();
        setForms(data);
        setFilteredForms(data);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchFormsData();
  }, []);

  useEffect(() => {
    let results = [...forms];
    if (searchTerm) {
      results = results.filter(
        (form) =>
          form.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          form.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    setFilteredForms(results);
    setPage(1);
  }, [forms, searchTerm]);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const paginatedForms = filteredForms.slice(
    (page - 1) * formsPerPage,
    page * formsPerPage
  );

  const pageCount = Math.ceil(filteredForms.length / formsPerPage);

  if (loading) {
    return (
      <Container maxWidth="md">
        <Box mt={4} mb={4}>
          <Skeleton variant="text" height={60} width="40%" />
          <Skeleton variant="rectangular" height={60} sx={{ my: 3 }} />
          <List>
            {[1, 2, 3, 4, 5].map((item) => (
              <ListItem key={item} alignItems="flex-start" sx={{ py: 1 }}>
                <ListItemIcon>
                  <Skeleton variant="circular" width={40} height={40} />
                </ListItemIcon>
                <ListItemText
                  primary={<Skeleton variant="text" height={20} width="80%" />}
                  secondary={
                    <Skeleton variant="text" height={20} width="60%" />
                  }
                />
              </ListItem>
            ))}
          </List>
        </Box>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="md">
        <Box mt={4} mb={4} textAlign="center">
          <Typography variant="h6" color="error" gutterBottom>
            Error Loading Forms
          </Typography>
          <Typography>{error.message}</Typography>
          <Button
            variant="contained"
            onClick={() => window.location.reload()}
            sx={{ mt: 2 }}
          >
            Try Again
          </Button>
        </Box>
      </Container>
    );
  }

  const bannerURL = "https://i.ibb.co/M5jVQ রিপোর্ট করুন/gov-forms-banner.jpg";

  return (
    <Box sx={{ backgroundColor: "#f5f7fa", py: 0, minHeight: "100vh" }}>
      {" "}
      {/* reduced py to 0 */}
      <Banner imageUrl={bannerURL} title="Forms & Downloads" />{" "}
      {/* banner component */}
      <Container maxWidth="md" sx={{ mt: 2 }}>
        {" "}
        {/* adjusted mt */}
        {/* search section - compact */}
        <Box sx={{ mb: 3 }}>
          {" "}
          <TextField
            fullWidth
            placeholder="Search forms..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            variant="outlined"
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
              sx: { borderRadius: "50px", height: "40px" },
            }}
            sx={{
              "& .MuiOutlinedInput-root": {
                borderRadius: "50px",
              },
            }}
          />
        </Box>
        {/* filter results summary */}
        <Box
          sx={{
            mb: 2,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          {" "}
          <Typography variant="body2" color="textSecondary">
            {" "}
            {filteredForms.length === 0
              ? "No forms found"
              : `Showing ${filteredForms.length} forms`}
          </Typography>
        </Box>
        {/* forms list */}
        <List
          sx={{
            bgcolor: "background.paper",
            borderRadius: "8px",
            overflow: "hidden",
          }}
        >
          {" "}
          {filteredForms.length === 0 ? (
            <Paper sx={{ p: 3, textAlign: "center" }}>
              <Typography variant="subtitle1" gutterBottom>
                No forms found
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Try adjusting your search criteria.
              </Typography>
            </Paper>
          ) : (
            paginatedForms.map((form, index) => (
              <Paper
                key={form.id}
                elevation={0}
                sx={{
                  borderBottom:
                    index < paginatedForms.length - 1
                      ? `1px solid ${theme.palette.divider}`
                      : "none",
                }}
              >
                {" "}
                {/* divider between list items */}
                <ListItem
                  component={RouterLink}
                  to={form.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  disablePadding
                >
                  <ListItemButton
                    sx={{ p: 2, display: "flex", alignItems: "center" }}
                  >
                    {" "}
                    {/* align items vertically in button */}
                    <ListItemIcon sx={{ minWidth: "auto", mr: 2 }}>
                      {" "}
                      {/* reduce icon spacing */}
                      {form.logoURL ? (
                        <Box
                          component="img"
                          src={form.logoURL}
                          alt={`${form.title} Logo`}
                          sx={{
                            width: 40,
                            height: 40,
                            borderRadius: "8px",
                            mr: 1,
                          }}
                        />
                      ) : (
                        <DescriptionIcon color="primary" />
                      )}
                    </ListItemIcon>
                    <ListItemText
                      primary={
                        <Typography variant="subtitle1" fontWeight={500}>
                          {form.title}
                        </Typography>
                      }
                      secondary={
                        <Typography
                          variant="body2"
                          color="textSecondary"
                          noWrap
                        >
                          {form.description}
                        </Typography>
                      }
                      sx={{ flexGrow: 1, minWidth: 0 }}
                    />
                    <ArrowForwardIcon color="action" />
                  </ListItemButton>
                </ListItem>
              </Paper>
            ))
          )}
        </List>
        {/* pagination */}
        {pageCount > 1 && (
          <Box sx={{ display: "flex", justifyContent: "center", mt: 3 }}>
            {" "}
            {/* reduced mt */}
            <Pagination
              count={pageCount}
              page={page}
              onChange={handleChangePage}
              color="primary"
              size={isMobile ? "small" : "medium"}
              showFirstButton
              showLastButton
              sx={{
                "& .MuiPaginationItem-root": {
                  "&.Mui-selected": {
                    fontWeight: "bold",
                  },
                },
              }}
            />
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default FormsPublic;

================
File: src/pages/Public/Home.js
================
import React, { useEffect, useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import { getArticles } from "../../api/articles";
import parse from "html-react-parser";
import {
  Container,
  Typography,
  Box,
  Paper,
  Button,
  Grid,
  Card,
  CardActionArea,
  CardContent,
  CardMedia,
  CircularProgress,
  Divider,
  Chip,
  Fade,
  Zoom,
  IconButton,
  useTheme,
  useMediaQuery,
  Skeleton,
} from "@mui/material";
import { useAuth } from "../../hooks/useAuth";
import Banner from "../../components/UI/Banner";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import EventIcon from "@mui/icons-material/Event";
import AnnouncementIcon from "@mui/icons-material/Announcement";
import SupportIcon from "@mui/icons-material/Support";
import LocationOnIcon from "@mui/icons-material/LocationOn";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import KeyboardArrowLeftIcon from "@mui/icons-material/KeyboardArrowLeft";
import KeyboardArrowRightIcon from "@mui/icons-material/KeyboardArrowRight";

const HomePublic = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [articles, setArticles] = useState([]);
  const [articlesLoading, setArticlesLoading] = useState(true);
  const [articlesError, setArticlesError] = useState(null);
  const { user, userType } = useAuth();
  const [bannerImage, setBannerImage] = useState("");
  const homePageBanner =
    "https://i.ibb.co/BVxPjCrZ/475172880-122193205580173185-8945588955944178897-n.jpg";
  const [currentSlide, setCurrentSlide] = useState(0);
  const [fadeIn, setFadeIn] = useState(true);

  // quick links array
  const quickLinks = [
    {
      title: "Report Concerns",
      icon: <AnnouncementIcon />,
      color: "#FF5722",
      path: "/report",
    },
    {
      title: "Upcoming Events",
      icon: <EventIcon />,
      color: "#2196F3",
      path: "/events",
    },
    {
      title: "Support Services",
      icon: <SupportIcon />,
      color: "#4CAF50",
      path: "/services",
    },
  ];

  // showcase items
  const showcaseItems = [
    {
      title: "Community Programs",
      description:
        "Join our various community initiatives designed to empower residents and foster a sense of unity.",
      imageUrl: "https://source.unsplash.com/random/400x300/?community",
      path: "/programs",
    },
    {
      title: "Local Business Directory",
      description:
        "Support local businesses and discover services available within our barangay.",
      imageUrl: "https://source.unsplash.com/random/400x300/?business",
      path: "/directory",
    },
    {
      title: "Health Services",
      description:
        "Learn about health initiatives and services offered to barangay residents.",
      imageUrl: "https://source.unsplash.com/random/400x300/?health",
      path: "/health",
    },
  ];

  const formatDate = (timestamp) => {
    if (!timestamp) return "";
    // handle firestore timestamp
    if (typeof timestamp === "object" && timestamp._seconds) {
      return new Date(timestamp._seconds * 1000).toLocaleDateString();
    }
    const date = new Date(timestamp);
    return date.toLocaleDateString();
  };

  // fetch latest 3 articles
  useEffect(() => {
    const fetchLatestArticles = async () => {
      try {
        const data = await getArticles();
        // sort articles by createdat
        const sortedArticles = [...data].sort((a, b) => {
          const dateA = a.createdAt?._seconds
            ? new Date(a.createdAt._seconds * 1000)
            : new Date(a.createdAt);
          const dateB = b.createdAt?._seconds
            ? new Date(b.createdAt._seconds * 1000)
            : new Date(b.createdAt);
          return dateB - dateA;
        });
        setArticles(sortedArticles.slice(0, 3)); // get the latest 3
      } catch (err) {
        setArticlesError(err);
      } finally {
        setArticlesLoading(false);
      }
    };

    fetchLatestArticles();
  }, []);

  // slide animation for showcase items
  useEffect(() => {
    const timer = setInterval(() => {
      setFadeIn(false);
      setTimeout(() => {
        setCurrentSlide((prev) => (prev + 1) % showcaseItems.length);
        setFadeIn(true);
      }, 500);
    }, 6000);

    return () => clearInterval(timer);
  }, [showcaseItems.length]);

  const handlePrevSlide = () => {
    setFadeIn(false);
    setTimeout(() => {
      setCurrentSlide(
        (prev) => (prev - 1 + showcaseItems.length) % showcaseItems.length
      );
      setFadeIn(true);
    }, 300);
  };

  const handleNextSlide = () => {
    setFadeIn(false);
    setTimeout(() => {
      setCurrentSlide((prev) => (prev + 1) % showcaseItems.length);
      setFadeIn(true);
    }, 300);
  };

  const submitTicketLink = user
    ? userType === "RESIDENT"
      ? "/user/tickets"
      : "/admin/tickets"
    : "/signup";

  useEffect(() => {
    setBannerImage(homePageBanner);
  }, []);

  return (
    <Box sx={{ backgroundColor: "#f5f7fa" }}>
      {/* banner with animated overlay text */}
      <Box sx={{ position: "relative" }}>
        <Banner imageUrl={bannerImage} title="" />
        <Box
          sx={{
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            backgroundColor: "rgba(0, 0, 0, 0.4)",
            color: "white",
            padding: 3,
            textAlign: "center",
          }}
        >
          <Zoom in={true} style={{ transitionDelay: "300ms" }}>
            <Typography
              variant="h2"
              component="h1"
              sx={{
                fontWeight: 700,
                mb: 2,
                fontSize: { xs: "2rem", sm: "3rem", md: "4rem" },
                textShadow: "2px 2px 4px rgba(0,0,0,0.5)",
              }}
            >
              Barangay San Antonio
            </Typography>
          </Zoom>
          <Fade in={true} style={{ transitionDelay: "600ms" }}>
            <Typography
              variant="h5"
              sx={{
                maxWidth: "800px",
                mb: 4,
                fontSize: { xs: "1rem", sm: "1.25rem", md: "1.5rem" },
                textShadow: "1px 1px 2px rgba(0,0,0,0.5)",
              }}
            >
              Building a stronger community through service, innovation, and
              collaboration
            </Typography>
          </Fade>
          <Fade in={true} style={{ transitionDelay: "900ms" }}>
            <Button
              variant="contained"
              size="large"
              component={RouterLink}
              to="/about"
              sx={{
                backgroundColor: "primary.main",
                color: "white",
                px: 4,
                py: 1.5,
                fontSize: "1.1rem",
                borderRadius: "50px",
                "&:hover": {
                  backgroundColor: "primary.dark",
                  transform: "translateY(-2px)",
                  boxShadow: "0 6px 20px rgba(0,0,0,0.2)",
                },
                transition: "all 0.3s ease",
              }}
            >
              Discover Our Barangay
            </Button>
          </Fade>
        </Box>
      </Box>

      <Container maxWidth="lg">
        {/* quick links section */}
        <Box
          sx={{
            mt: -5,
            position: "relative",
            zIndex: 10,
            mx: { xs: 2, md: 0 },
          }}
        ></Box>

        {/* welcome section with animation */}
        <Box mt={8} mb={6}>
          <Fade in={true} style={{ transitionDelay: "300ms" }}>
            <Paper
              elevation={0}
              sx={{
                p: 4,
                mb: 4,
                borderRadius: "16px",
                backgroundImage:
                  "linear-gradient(135deg, #f5f7fa 0%, #ffffff 100%)",
                border: "1px solid rgba(230, 230, 230, 0.5)",
              }}
            >
              <Grid container spacing={4} alignItems="center">
                <Grid item xs={12} md={7}>
                  <Typography
                    variant="h4"
                    component="h2"
                    gutterBottom
                    sx={{
                      fontWeight: 700,
                      color: "primary.main",
                    }}
                  >
                    Welcome to Barangay San Antonio!
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{ mb: 3, fontSize: "1.1rem", lineHeight: 1.6 }}
                  >
                    We are dedicated to serving our community and providing easy
                    access to information and services. Our barangay aims to
                    create a safe, inclusive, and thriving environment for all
                    residents.
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{ mb: 3, fontSize: "1.1rem", lineHeight: 1.6 }}
                  >
                    Explore our site to find the latest news, announcements,
                    community programs, and important contact details.
                  </Typography>
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1 }}>
                    <Chip
                      icon={<LocationOnIcon />}
                      label="Location: Makati City"
                      sx={{ mr: 1, mb: 1 }}
                    />
                    <Chip
                      icon={<AccessTimeIcon />}
                      label="Office Hours: 8AM - 5PM"
                      sx={{ mr: 1, mb: 1 }}
                    />
                  </Box>
                </Grid>
                <Grid
                  item
                  xs={12}
                  md={5}
                  sx={{ display: { xs: "none", md: "block" } }}
                >
                  <Box
                    sx={{
                      borderRadius: "12px",
                      overflow: "hidden",
                      boxShadow: "0 10px 30px rgba(0,0,0,0.1)",
                    }}
                  >
                    <img
                      src="https://source.unsplash.com/random/600x400/?philippines,community"
                      alt="Community"
                      style={{
                        width: "100%",
                        height: "auto",
                        display: "block",
                      }}
                    />
                  </Box>
                </Grid>
              </Grid>
            </Paper>
          </Fade>
        </Box>

        {/* interactive showcase section */}
        <Box mb={8}>
          <Typography variant="h4" gutterBottom sx={{ fontWeight: 700 }}>
            Community Highlights
          </Typography>
          <Divider sx={{ mb: 4 }} />

          <Box sx={{ position: "relative" }}>
            <Fade in={fadeIn} timeout={500}>
              <Paper
                elevation={3}
                sx={{
                  borderRadius: "16px",
                  overflow: "hidden",
                }}
              >
                <Grid container>
                  <Grid item xs={12} md={6}>
                    <Box
                      sx={{
                        height: { xs: "200px", md: "400px" },
                        backgroundImage: `url(${showcaseItems[currentSlide].imageUrl})`,
                        backgroundSize: "cover",
                        backgroundPosition: "center",
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Box
                      sx={{
                        p: 4,
                        height: "100%",
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "center",
                      }}
                    >
                      <Typography
                        variant="h5"
                        component="h3"
                        gutterBottom
                        sx={{ fontWeight: 700 }}
                      >
                        {showcaseItems[currentSlide].title}
                      </Typography>
                      <Typography
                        variant="body1"
                        paragraph
                        sx={{ mb: 4, fontSize: "1.05rem" }}
                      >
                        {showcaseItems[currentSlide].description}
                      </Typography>
                      <Button
                        variant="outlined"
                        component={RouterLink}
                        to={showcaseItems[currentSlide].path}
                        endIcon={<ArrowForwardIcon />}
                        sx={{
                          alignSelf: "flex-start",
                          borderRadius: "50px",
                          px: 3,
                          "&:hover": {
                            backgroundColor: "rgba(0,0,0,0.04)",
                            transform: "translateX(5px)",
                          },
                          transition: "all 0.3s ease",
                        }}
                      >
                        Learn More
                      </Button>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            </Fade>

            {/* slider controls */}
            <Box
              sx={{
                display: "flex",
                justifyContent: "center",
                mt: 2,
                gap: 1,
              }}
            >
              {showcaseItems.map((_, index) => (
                <Box
                  key={index}
                  sx={{
                    width: "10px",
                    height: "10px",
                    borderRadius: "50%",
                    backgroundColor:
                      currentSlide === index ? "primary.main" : "grey.300",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                  }}
                  onClick={() => {
                    setFadeIn(false);
                    setTimeout(() => {
                      setCurrentSlide(index);
                      setFadeIn(true);
                    }, 300);
                  }}
                />
              ))}
            </Box>

            {/* arrow controls */}
            <IconButton
              sx={{
                position: "absolute",
                left: 10,
                top: "50%",
                transform: "translateY(-50%)",
                backgroundColor: "rgba(255,255,255,0.8)",
                "&:hover": { backgroundColor: "rgba(255,255,255,0.9)" },
              }}
              onClick={handlePrevSlide}
            >
              <KeyboardArrowLeftIcon />
            </IconButton>
            <IconButton
              sx={{
                position: "absolute",
                right: 10,
                top: "50%",
                transform: "translateY(-50%)",
                backgroundColor: "rgba(255,255,255,0.8)",
                "&:hover": { backgroundColor: "rgba(255,255,255,0.9)" },
              }}
              onClick={handleNextSlide}
            >
              <KeyboardArrowRightIcon />
            </IconButton>
          </Box>
        </Box>

        {/* latest news with hover effects */}
        <Box mb={8}>
          <Typography variant="h4" gutterBottom sx={{ fontWeight: 700 }}>
            Latest News
          </Typography>
          <Divider sx={{ mb: 4 }} />

          {articlesLoading ? (
            <Grid container spacing={3}>
              {[1, 2, 3].map((item) => (
                <Grid item xs={12} sm={6} md={4} key={item}>
                  <Card sx={{ height: "100%" }}>
                    <Skeleton variant="rectangular" height={140} />
                    <CardContent>
                      <Skeleton variant="text" height={30} width="80%" />
                      <Skeleton variant="text" height={20} width="40%" />
                      <Skeleton variant="text" height={60} />
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          ) : articlesError ? (
            <Typography color="error">
              Error loading articles: {articlesError.message}
            </Typography>
          ) : (
            <Grid container spacing={3}>
              {articles.map((article) => (
                <Grid item xs={12} sm={6} md={4} key={article.id}>
                  <Card
                    sx={{
                      height: "100%",
                      display: "flex",
                      flexDirection: "column",
                      transition: "all 0.3s ease",
                      "&:hover": {
                        transform: "translateY(-10px)",
                        boxShadow: "0 12px 20px rgba(0,0,0,0.1)",
                      },
                      borderRadius: "12px",
                      overflow: "hidden",
                    }}
                  >
                    <CardActionArea
                      component={RouterLink}
                      to={`/articles/${article.id}`}
                      sx={{
                        flexGrow: 1,
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "stretch",
                      }}
                    >
                      {article.imageURL ? (
                        <CardMedia
                          component="img"
                          height="160"
                          image={article.imageURL}
                          alt={article.title}
                          sx={{
                            transition: "all 0.5s ease",
                            "&:hover": {
                              transform: "scale(1.05)",
                            },
                          }}
                        />
                      ) : (
                        <CardMedia
                          component="img"
                          height="160"
                          image="https://source.unsplash.com/random/400x200/?news"
                          alt="News placeholder"
                          sx={{
                            transition: "all 0.5s ease",
                            "&:hover": {
                              transform: "scale(1.05)",
                            },
                          }}
                        />
                      )}
                      <CardContent
                        sx={{
                          flexGrow: 1,
                          display: "flex",
                          flexDirection: "column",
                        }}
                      >
                        <Typography
                          gutterBottom
                          variant="h6"
                          component="div"
                          sx={{ fontWeight: 600 }}
                        >
                          {article.title}
                        </Typography>
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          sx={{ mb: 2 }}
                        >
                          <EventIcon
                            sx={{
                              fontSize: "0.9rem",
                              verticalAlign: "middle",
                              mr: 0.5,
                            }}
                          />
                          {formatDate(article.createdAt)}
                        </Typography>
                        {article.summary && (
                          <Typography
                            variant="body2"
                            color="text.secondary"
                            sx={{ mb: 2, flexGrow: 1 }}
                          >
                            {article.summary.length > 100
                              ? `${article.summary.substring(0, 100)}...`
                              : article.summary}
                          </Typography>
                        )}
                        <Typography
                          variant="body2"
                          color="primary"
                          sx={{
                            display: "flex",
                            alignItems: "center",
                            mt: "auto",
                            fontWeight: 500,
                          }}
                        >
                          Read More{" "}
                          <ArrowForwardIcon
                            sx={{ fontSize: "0.9rem", ml: 0.5 }}
                          />
                        </Typography>
                      </CardContent>
                    </CardActionArea>
                  </Card>
                </Grid>
              ))}
            </Grid>
          )}

          <Box sx={{ textAlign: "center", mt: 4 }}>
            <Button
              variant="outlined"
              component={RouterLink}
              to="/articles"
              endIcon={<ArrowForwardIcon />}
              sx={{
                borderRadius: "50px",
                px: 4,
                py: 1,
                "&:hover": {
                  backgroundColor: "rgba(0,0,0,0.04)",
                  transform: "translateY(-3px)",
                },
                transition: "all 0.3s ease",
              }}
            >
              View All News
            </Button>
          </Box>
        </Box>

        {/* call to action with animation */}
        <Zoom in={true}>
          <Paper
            elevation={4}
            sx={{
              p: 4,
              mb: 8,
              borderRadius: "20px",
              background: "linear-gradient(45deg, #1a237e 0%, #3949ab 100%)",
              color: "white",
              textAlign: "center",
              position: "relative",
              overflow: "hidden",
            }}
          >
            {/* background decoration */}
            <Box
              sx={{
                position: "absolute",
                top: -50,
                right: -50,
                width: "200px",
                height: "200px",
                borderRadius: "50%",
                backgroundColor: "rgba(255,255,255,0.1)",
                zIndex: 0,
              }}
            />
            <Box
              sx={{
                position: "absolute",
                bottom: -30,
                left: -30,
                width: "150px",
                height: "150px",
                borderRadius: "50%",
                backgroundColor: "rgba(255,255,255,0.1)",
                zIndex: 0,
              }}
            />

            <Box sx={{ position: "relative", zIndex: 1 }}>
              <Typography variant="h4" gutterBottom sx={{ fontWeight: 700 }}>
                Need Assistance?
              </Typography>
              <Typography
                variant="body1"
                sx={{
                  mb: 4,
                  maxWidth: "700px",
                  mx: "auto",
                  fontSize: "1.1rem",
                }}
              >
                Our barangay officials are ready to help with your concerns.
                Submit a ticket through our system, and we'll respond as quickly
                as possible to address your needs.
              </Typography>
              <Button
                variant="contained"
                size="large"
                component={RouterLink}
                to={submitTicketLink}
                sx={{
                  bgcolor: "white",
                  color: "primary.dark",
                  px: 4,
                  py: 1.5,
                  borderRadius: "50px",
                  textTransform: "none",
                  fontWeight: 600,
                  fontSize: "1.1rem",
                  "&:hover": {
                    bgcolor: "#f0f0f0",
                    transform: "translateY(-3px)",
                    boxShadow: "0 6px 20px rgba(0,0,0,0.2)",
                  },
                  transition: "all 0.3s ease",
                }}
              >
                {user ? "View My Tickets" : "Sign Up to Submit a Ticket"}
              </Button>
            </Box>
          </Paper>
        </Zoom>
      </Container>
    </Box>
  );
};

export default HomePublic;

================
File: src/pages/Public/Officials.js
================
import React from 'react';
import PageDetail from './PageDetail'; // import pagedetail

const Officials = () => {
  return <PageDetail pageSlug="officials" />; // use pagedetail with the correct slug
};

export default Officials;

================
File: src/pages/Public/PageDetail.js
================
import React, { useState, useEffect } from 'react';
import { Typography, Container, Box, useTheme } from '@mui/material'; // Import useTheme
import { getPage } from '../../api/pages';
import LoadingSpinner from '../../components/UI/LoadingSpinner';
import ErrorMessage from '../../components/UI/ErrorMessage';
import DOMPurify from 'dompurify';
import { formatDate } from '../../utils/dateUtils';
import Banner from '../../components/UI/Banner';
import { grey } from '@mui/material/colors';

const PageDetail = ({ pageSlug }) => {
  const [page, setPage] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const theme = useTheme(); 

  useEffect(() => {
    const fetchPageData = async () => {
      try {
        const fetchedPage = await getPage(pageSlug);
        if (fetchedPage) {
          setPage(fetchedPage);
        } else {
          setError(new Error('Page not found'));
        }
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };
    fetchPageData();
  }, [pageSlug]);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error.message} />;
  if (!page) return <div>Page not found.</div>;

  return (
    <>
      <Banner imageUrl={page.bannerURL} title={page.title} />
      <Container sx={{ py: 4 }}>
        <Typography variant="subtitle2" color="text.secondary" gutterBottom>
          {formatDate(page.createdAt)}
        </Typography>

        {/* quill content styling */}
        <Box sx={{
          '& p': {
            fontSize: '1.1rem',
            lineHeight: 1.6,
            marginBottom: '1em',
            color: theme.palette.text.primary,
          },
          '& h1': { ...theme.typography.h1, marginTop: '1.5em', marginBottom: '0.5em' },
          '& h2': { ...theme.typography.h2, marginTop: '1.5em', marginBottom: '0.5em' },
          '& h3': { ...theme.typography.h3, marginTop: '1.5em', marginBottom: '0.5em' },
          '& h4': { ...theme.typography.h4, marginTop: '1.2em', marginBottom: '0.4em' },
          '& h5': { ...theme.typography.h5, marginTop: '1.2em', marginBottom: '0.4em' },
          '& h6': { ...theme.typography.h6, marginTop: '1em', marginBottom: '0.3em' },
          '& ul': {
            paddingLeft: '2em',
            marginBottom: '1em',
            '& li': {
              listStyleType: 'disc',
              marginBottom: '0.5em',
            },
          },
          '& ol': {
            paddingLeft: '2em',
            marginBottom: '1em',
            '& li': {
              listStyleType: 'decimal',
              marginBottom: '0.5em',
            },
          },
          '& blockquote': {
            borderLeft: `4px solid ${theme.palette.primary.light}`,
            paddingLeft: '1em',
            fontStyle: 'italic',
            marginBottom: '1em',
            color: theme.palette.text.secondary,
          },
          '& a': {
            color: theme.palette.primary.main,
            textDecoration: 'none',
            '&:hover': {
              textDecoration: 'underline',
            },
          },
          '& strong': {
            fontWeight: theme.typography.fontWeightBold,
          },
          '& em': {
            fontStyle: 'italic',
          },
          '& pre': { 
            backgroundColor: grey[100], // Light grey background
            padding: '1em',
            borderRadius: 4,
            overflowX: 'auto', 
            fontFamily: '"Roboto Mono", monospace', 
            fontSize: '0.9rem',
            lineHeight: 1.4,
          },
          '& img': { // Images
            maxWidth: '100%', // make images responsive
            height: 'auto',
            display: 'block', // remove extra space below images
            borderRadius: 8,  
          }
        }}>
          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(page.content) }} />
        </Box>
      </Container>
    </>
  );
};

export default PageDetail;

================
File: src/pages/Shared/TicketMessages.js
================
import React, { useState, useEffect, useRef } from "react";
import { useParams } from "react-router-dom";
import {
  Box,
  Paper,
  Typography,
  TextField,
  IconButton,
  CircularProgress,
  Avatar,
  Card,
  CardContent,
  Grid,
  Alert,
  Stack,
  useTheme,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import { getMessages, createMessage } from "../../api/messages";
import { useAuth } from "../../hooks/useAuth";

const TicketMessages = () => {
  const { id: ticketId } = useParams();
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [newMessageContent, setNewMessageContent] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const theme = useTheme();
  const messagesEndRef = useRef(null);

  // fetch messages
  useEffect(() => {
    const fetchMessages = async () => {
      setLoading(true);
      try {
        const fetchedMessages = await getMessages();
        const filteredMessages = fetchedMessages.filter(
          (message) => message.ticket === ticketId,
        );
        setMessages(filteredMessages);
      } catch (e) {
        setError(e);
      } finally {
        setLoading(false);
      }
    };

    fetchMessages();

    // set up a polling interval to check for new messages every 30 seconds
    const interval = setInterval(fetchMessages, 30000);

    // clean up interval on component unmount
    return () => clearInterval(interval);
  }, [ticketId]);

  // scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleSendMessage = async () => {
    if (newMessageContent.trim() === "") return;

    try {
      const newMessage = {
        ticket: ticketId,
        content: newMessageContent,
        createdBy: user.uid,
      };
      await createMessage(newMessage);
      // refresh messages after sending
      const updatedMessages = await getMessages();
      const filteredMessages = updatedMessages.filter(
        (message) => message.ticket === ticketId,
      );
      setMessages(filteredMessages);
      setNewMessageContent("");
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };

  // handle enter key press
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // get initials for avatar
  const getInitials = (name) => {
    if (!name) return "U";
    return name
      .split(" ")
      .map((part) => part[0])
      .join("")
      .toUpperCase()
      .substring(0, 2);
  };

  // format timestamp
  const formatTime = (timestamp) => {
    if (!timestamp) return "";
    const date = new Date(timestamp);
    return (
      date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }) +
      " | " +
      date.toLocaleDateString()
    );
  };

  // determine if message is from current user
  const isCurrentUser = (messageUserId) => {
    return messageUserId === user.uid;
  };

  return (
    <Box
      sx={{
        height: "calc(100vh - 100px)",
        display: "flex",
        flexDirection: "column",
      }}
    >
      {/* header */}
      <Paper
        elevation={3}
        sx={{
          p: 2,
          backgroundColor: theme.palette.primary.main,
          color: "white",
          borderRadius: "4px 4px 0 0",
        }}
      >
        <Typography variant="h6">Ticket #{ticketId}</Typography>
      </Paper>

      {/* messages container */}
      <Box
        sx={{
          flex: 1,
          overflow: "auto",
          backgroundColor: theme.palette.grey[50],
          p: 2,
        }}
      >
        {loading && messages.length === 0 ? (
          <Box sx={{ display: "flex", justifyContent: "center", p: 3 }}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Alert severity="error">
            Error loading messages: {error.message}
          </Alert>
        ) : messages.length === 0 ? (
          <Alert severity="info">
            No messages yet. Start the conversation!
          </Alert>
        ) : (
          <Stack spacing={2}>
            {messages.map((message) => {
              const fromCurrentUser = isCurrentUser(message.createdBy);

              return (
                <Box
                  key={message.id}
                  sx={{
                    display: "flex",
                    justifyContent: fromCurrentUser ? "flex-end" : "flex-start",
                    mb: 1,
                  }}
                >
                  <Grid container spacing={1} sx={{ maxWidth: "80%" }}>
                    {!fromCurrentUser && (
                      <Grid item xs={1}>
                        <Avatar sx={{ bgcolor: theme.palette.secondary.main }}>
                          {getInitials(message.createdBy)}
                        </Avatar>
                      </Grid>
                    )}

                    <Grid item xs={fromCurrentUser ? 12 : 11}>
                      <Card
                        sx={{
                          borderRadius: fromCurrentUser
                            ? "15px 15px 0 15px"
                            : "0 15px 15px 15px",
                          backgroundColor: fromCurrentUser
                            ? theme.palette.primary.light
                            : "white",
                          color: fromCurrentUser ? "white" : "inherit",
                        }}
                      >
                        <CardContent
                          sx={{ py: 1, px: 2, "&:last-child": { pb: 1 } }}
                        >
                          <Typography variant="body1">
                            {message.content}
                          </Typography>
                          <Typography
                            variant="caption"
                            sx={{
                              display: "block",
                              mt: 0.5,
                              textAlign: "right",
                              opacity: 0.7,
                            }}
                          >
                            {formatTime(message.createdAt)}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  </Grid>
                </Box>
              );
            })}
            <div ref={messagesEndRef} />
          </Stack>
        )}
      </Box>

      {/* message input */}
      <Paper
        elevation={3}
        sx={{
          p: 2,
          borderRadius: "0 0 4px 4px",
          borderTop: `1px solid ${theme.palette.divider}`,
        }}
      >
        <Box sx={{ display: "flex", alignItems: "flex-end" }}>
          <TextField
            fullWidth
            multiline
            maxRows={4}
            variant="outlined"
            placeholder="Type your message..."
            value={newMessageContent}
            onChange={(e) => setNewMessageContent(e.target.value)}
            onKeyPress={handleKeyPress}
            sx={{ mr: 1 }}
          />
          <IconButton
            color="primary"
            onClick={handleSendMessage}
            disabled={newMessageContent.trim() === ""}
            sx={{
              p: 1,
              backgroundColor: theme.palette.primary.main,
              color: "white",
              "&:hover": {
                backgroundColor: theme.palette.primary.dark,
              },
              "&.Mui-disabled": {
                backgroundColor: theme.palette.grey[300],
                color: theme.palette.grey[500],
              },
            }}
          >
            <SendIcon />
          </IconButton>
        </Box>
      </Paper>
    </Box>
  );
};

export default TicketMessages;

================
File: src/pages/User/Home.js
================
import React from "react";
import { Typography, Container } from "@mui/material";

const UserHome = () => {
  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Welcome, User!
      </Typography>
      <Typography variant="body1">
        This is your dashboard. You can manage your tickets here.
      </Typography>
    </Container>
  );
};

export default UserHome;

================
File: src/pages/User/Tickets.js
================
import React from "react";
import ManagementPage from "../../components/Management/ManagementPage";
import * as ticketsApi from "../../api/tickets";
import { useAuth } from "../../hooks/useAuth";
import { Link } from "react-router-dom";

const UserTickets = () => {
  const { user } = useAuth();

  if (!user) {
    return <div>You must be logged in to view your tickets.</div>;
  }

  const ticketFields = [
    { name: "title", label: "Title", type: "text" },
    {
      name: "status",
      label: "Status",
      type: "select",
      options: [
        { value: "OPEN", label: "Open" },
        { value: "IN_PROGRESS", label: "In Progress" },
        { value: "CLOSED", label: "Closed" },
      ],
    },
    {
      name: "assignedTo",
      label: "Assigned To",
      type: "select",
      options: [],
    },
    { name: "createdAt", label: "Created At", type: "text", readOnly: true },
  ];

  const columns = [
    { field: "title", headerName: "Title" },
    { field: "status", headerName: "Status" },
    {
      field: "messagesLink",
      headerName: "Messages",
      renderCell: (params) => (
        <Link to={`/tickets/${params.row.id}/messages`}>View Messages</Link>
      ),
    },
  ];

  // custom fetch function to get only the user's tickets
  const fetchUserTickets = () =>
    ticketsApi.getTickets().then((tickets) => {
      return tickets.filter((ticket) => ticket.createdBy === user.uid);
    });

  return (
    <ManagementPage
      title="My Tickets"
      columns={columns}
      fields={ticketFields}
      fetchItems={fetchUserTickets}
      getItem={ticketsApi.getTicket}
      createItem={ticketsApi.createTicket}
      updateItem={ticketsApi.updateTicket}
      deleteItem={ticketsApi.deleteTicket}
    />
  );
};

export default UserTickets;

================
File: src/theme.js
================
import { createTheme } from "@mui/material/styles";
import { blueGrey, grey, indigo, teal, red } from "@mui/material/colors";

const navyBlueTheme = createTheme({
  palette: {
    primary: {
      main: indigo[700],
      light: indigo[500],
      dark: indigo[900],
      contrastText: "#fff",
    },
    secondary: {
      main: teal[400],
      light: teal[300],
      dark: teal[600],
      contrastText: "#000",
    },
    error: {
      main: red[400],
    },
    background: {
      default: grey[100],
      paper: "#fff",
    },
    text: {
      primary: blueGrey[900],
      secondary: blueGrey[700],
    },
  },
  typography: {
    fontFamily:
      '"Plus Jakarta Sans", "Roboto", "Helvetica", "Arial", sans-serif',
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightBold: 700, // back to 700 for bold
    h1: {
      fontWeight: 700, // bold for h1
    },
    h2: {
      fontWeight: 700, // bold for h2
    },
    h3: {
      fontWeight: 600, // medium-bold for h3
    },
    h4: {
      fontWeight: 600, // medium-bold for h4
    },
    h5: {
      fontWeight: 500, // medium for h5
    },
    h6: {
      fontWeight: 500, // medium for h6
    },
    subtitle1: {
      fontWeight: 500,
    },
  },
  components: {
    MuiAppBar: {
      defaultProps: {
        color: "primary",
      },
      styleOverrides: {
        root: {
          boxShadow: "none",
        },
      },
    },
    MuiButton: {
      defaultProps: {
        variant: "contained",
        color: "primary",
      },
      styleOverrides: {
        root: {
          borderRadius: 6,
          textTransform: "none",
          fontWeight: 500,
          boxShadow: "none",
        },
        contained: {
          boxShadow: "none",
        },
        outlinedPrimary: {
          borderColor: "primary.main",
          color: "primary.main",
          "&:hover": {
            backgroundColor: "rgba(26, 35, 126, 0.04)",
          },
        },
        outlinedSecondary: {
          borderColor: "secondary.main",
          color: "secondary.main",
          "&:hover": {
            backgroundColor: "rgba(0, 188, 212, 0.04)",
          },
        },
        textPrimary: {
          color: "primary.main",
          "&:hover": {
            backgroundColor: "rgba(26, 35, 126, 0.04)",
          },
        },
        textSecondary: {
          color: "secondary.main",
          "&:hover": {
            backgroundColor: "rgba(0, 188, 212, 0.04)",
          },
        },
      },
    },
    MuiIconButton: {
      styleOverrides: {
        root: {
          color: "text.secondary",
          "&:hover": {
            backgroundColor: "rgba(0, 0, 0, 0.04)",
          },
        },
      },
    },
    MuiTextField: {
      defaultProps: {
        variant: "outlined",
      },
      styleOverrides: {
        root: {
          "& .MuiOutlinedInput-root": {
            "& fieldset": {
              borderColor: grey[400],
            },
            "&:hover fieldset": {
              borderColor: "primary.main",
            },
            "&.Mui-focused fieldset": {
              borderColor: "primary.main",
            },
          },
        },
      },
    },
    MuiLink: {
      styleOverrides: {
        root: {
          color: "primary.main",
          textDecoration: "none",
          "&:hover": {
            textDecoration: "underline",
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        rounded: {
          borderRadius: 8,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          boxShadow: "0 2px 4px rgba(0,0,0,0.4)",
        },
      },
    },
    MuiList: {
      styleOverrides: {
        root: {
          backgroundColor: grey[50],
        },
      },
    },
    MuiListItem: {
      styleOverrides: {
        root: {
          "&:hover": {
            backgroundColor: blueGrey[50],
          },
        },
      },
    },
    MuiListItemText: {
      styleOverrides: {
        primary: {
          color: "text.primary",
        },
        secondary: {
          color: "text.secondary",
        },
      },
    },
    MuiDialog: {
      styleOverrides: {
        paper: {
          borderRadius: 12,
        },
      },
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          backgroundColor: "primary.main",
          color: "primary.contrastText",
          padding: "16px 24px",
        },
      },
    },
    MuiDialogContent: {
      styleOverrides: {
        root: {
          padding: "24px",
        },
      },
    },
    MuiDialogActions: {
      styleOverrides: {
        root: {
          padding: "8px 24px",
        },
      },
    },
    MuiAlert: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
        standardInfo: {
          backgroundColor: blueGrey[50],
          color: "text.primary",
        },
      },
    },
    MuiCircularProgress: {
      defaultProps: {
        color: "primary",
      },
    },
    MuiDivider: {
      styleOverrides: {
        root: {
          borderColor: grey[300],
        },
      },
    },
    MuiFab: {
      styleOverrides: {
        root: {
          boxShadow: "0 3px 5px rgba(0, 0, 0, 0.2)",
        },
      },
    },
    MuiAvatar: {
      styleOverrides: {
        root: {
          backgroundColor: "secondary.main",
          color: "secondary.contrastText",
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          backgroundColor: "primary.main",
          color: "primary.contrastText",
          fontWeight: 600,
        },
        body: {
          color: "text.primary",
        },
      },
    },
    MuiTablePagination: {
      styleOverrides: {
        root: {
          color: "text.secondary",
        },
      },
    },
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          backgroundColor: "primary.main",
          color: "primary.contrastText",
        },
      },
    },
    MuiInputLabel: {
      styleOverrides: {
        root: {
          color: "text.secondary",
          "&.Mui-focused": {
            color: "primary.main",
          },
        },
      },
    },
    MuiFormHelperText: {
      styleOverrides: {
        root: {
          color: "text.secondary",
        },
      },
    },
    MuiSelect: {
      styleOverrides: {
        select: {
          "&:focus": {
            backgroundColor: "transparent",
          },
        },
      },
    },
    MuiMenuItem: {
      styleOverrides: {
        root: {
          "&:hover": {
            backgroundColor: blueGrey[50],
          },
          "&.Mui-selected": {
            backgroundColor: "primary.light",
            color: "primary.contrastText",
            "&:hover": {
              backgroundColor: "primary.light",
            },
          },
        },
      },
    },
  },
});

export default navyBlueTheme;

================
File: src/utils/dateUtils.js
================
export const formatDate = (dateString) => {
  if (!dateString) return "";
  const date = new Date(dateString);
  return date.toLocaleDateString();
};

export const formatDateTime = (dateString) => {
  if (!dateString) return "";
  const date = new Date(dateString);
  return date.toLocaleString();
};



================================================================
End of Codebase
================================================================
